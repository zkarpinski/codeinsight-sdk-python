{
  "openapi": "3.0.0",
  "info": {
    "description": "The Code Insight REST APIs provide a standard interface for interacting with the application.\n\t\t\t\t\t\t\t\t\tAn authorization JWT token must be included in the HTTP Authorization header using the Bearer schema. The token can be obtained from the Code Insight Web UI under the Preferences menu. The token must be included in the HTTP header as follows: Authorization: Bearer JWT_TOKEN. _*Note that \"Bearer\" must precede the actual JWT token value.",
    "version": "v1",
    "title": "Code Insight REST API Documentation"
  },
  "tags": [
    {
      "name": "CodebaseFolder"
    },
    {
      "name": "Component"
    },
    {
      "name": "Deprecated APIs"
    },
    {
      "name": "Files"
    },
    {
      "name": "Folder"
    },
    {
      "name": "Inventory API"
    },
    {
      "name": "Jobs"
    },
    {
      "name": "Project API"
    },
    {
      "name": "Reports"
    },
    {
      "name": "Rules"
    },
    {
      "name": "Scan API"
    },
    {
      "name": "Scan profiles"
    },
    {
      "name": "Task"
    },
    {
      "name": "User API"
    },
    {
      "name": "inventoryWorkflow"
    },
    {
      "name": "ldap"
    },
    {
      "name": "license"
    },
    {
      "name": "sourceCodeManagement"
    },
    {
      "name": "vulnerability"
    }
  ],
  "paths": {
    "/codebasefolder/{folderId}/review": {
      "put": {
        "tags": [
          "CodebaseFolder"
        ],
        "summary": "Mark folder as reviewed/unreviewed",
        "description": "For the given folderId mark as reviewed/unreviewed. Only the Analyst has the permission to do this operation.",
        "operationId": "updateFolderReview",
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "ID of the Folder",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isRemote",
            "in": "query",
            "description": "if true, fetch results of corresponding remote folder",
            "required": false,
            "example": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "markAsReviewed",
            "in": "query",
            "description": "if true, mark files inside the folder as reviewed",
            "required": false,
            "example": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/component/lookup": {
      "get": {
        "tags": [
          "Deprecated APIs"
        ],
        "summary": "Component Lookup",
        "description": "This API is Deprecated and new API is codeinsight/api/components/search",
        "operationId": "componentLookup",
        "parameters": [
          {
            "name": "keyword",
            "in": "query",
            "description": "Any Keyword",
            "required": true,
            "example": "E.g. GNU",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Page Size",
            "required": false,
            "example": "E.g. 10 | default: 100",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Number",
            "required": false,
            "example": "E.g. 2 | default: 1",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComponentRestFormat"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": true
      }
    },
    "/components": {
      "post": {
        "tags": [
          "Component"
        ],
        "summary": "Create a custom component",
        "description": "Creates a custom component",
        "operationId": "createCustomComponent",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComponentModel"
              }
            }
          },
          "description": "To create a custom component the name, title and url field is required. \n Allowable values of forgeId(Optional) are \n 1 : Other(This will be used as default when none is supplied) | 2 : SourceForge | 3 : Apache | 5 : MySQL AB |11 : kernel.org | 53 : Mozilla | 78 : Java.net | 87 : GNU | 175 : Free Software Directory | 176 : CodePlex | 186 : Savannah | 248 : CPAN | 419 : Google Code | 628 : Ibiblio Maven2 | 696 : GitHub | 2033 : NuGet Gallery | 2037 : npm |2039 : RubyGems | 2040 : CentOS Project | 2067 : PyPI | 2070 : Packagist | 2073 : Google's Maven Repository | 2076 : crates.io",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/components/search": {
      "get": {
        "tags": [
          "Component"
        ],
        "summary": "Component Search",
        "description": "Search for the components based on the given input and return list of components which includes registered,popular and unpopular.Response will not include vulnerabilities and licenses of the version",
        "operationId": "componentSearch",
        "parameters": [
          {
            "name": "searchBy",
            "in": "query",
            "description": "Search Type. default is NAME.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "NAME",
                "URL",
                "CPE",
                "FORGE"
              ]
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Search Filter. This is required for searchBy NAME, default is ALL_TERMS.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ALL_TERMS",
                "ANY_TERM",
                "BEGINS_WITH",
                "EXACT_MATCH"
              ]
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "Any Keyword. This is required for searchBy NAME/URL and optional for CPE. For searchBy CPE, the supplied searchTerm E.g.\"apache commons\" would perform exact match against the component.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeVersions",
            "in": "query",
            "description": "If true , response will include versions as well.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "vendor",
            "in": "query",
            "description": "Vendor name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "product",
            "in": "query",
            "description": "Product name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forgeName",
            "in": "query",
            "description": "Forge Name. is required for searchBy FORGE and optional for NAME/URL/CPE",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "SourceForge",
                "Apache",
                "MySQL AB",
                "Java.net",
                "GNU",
                "Free Software Directory",
                "CodePlex",
                "Savannah",
                "Google Code",
                "Hackage",
                "NuGet Gallery",
                "npm",
                "CentOS Project",
                "PyPI",
                "Google's Maven Repository",
                "Clojars",
                "Ibiblio Maven2",
                "Packagist",
                "GitHub",
                "RubyGems",
                "crates.io",
                "CRAN",
                "CPAN",
                "Fedora Koji",
                "GitLab"
              ]
            }
          },
          {
            "name": "projectName",
            "in": "query",
            "description": "Required param for forges: SourceForge|Apache|MySQL AB|Java.net|GNU|Free Software Directory|CodePlex|Savannah|Google Code|GitLab",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "packageName",
            "in": "query",
            "description": "Required param for forges: Hackage|NuGet Gallery|npm|PyPI|Packagist|CentOS Project",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "Required param for forges: Google's Maven Repository|Clojars|Ibiblio Maven2",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artifactId",
            "in": "query",
            "description": "Required param for forges: Google's Maven Repository|Clojars|Ibiblio Maven2",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "moduleOrDistributionName",
            "in": "query",
            "description": "Required param for forge: CPAN ",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "packageOrDistributionName",
            "in": "query",
            "description": "Required param for forge: CRAN | Fedora Koji",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "Required param for forge: GitHub | GitLab (It accepts Author/Org value) ",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositoryName",
            "in": "query",
            "description": "Required param for forge: GitHub ",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vendorName",
            "in": "query",
            "description": "Required param for forge: Packagist",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "gemName",
            "in": "query",
            "description": "Required param for forge: RubyGems",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "crate",
            "in": "query",
            "description": "Required param for forge: crates.io",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size. Number Of Records to fetch per page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Page Number. Index of the page to start with(starts from 1)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComponentListModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/components/versions/{id}": {
      "get": {
        "tags": [
          "Component"
        ],
        "summary": "Get Component version details",
        "description": "Get Component version details",
        "operationId": "getVersionDetails",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the component version",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/components/{componentId}": {
      "get": {
        "tags": [
          "Component"
        ],
        "summary": "Get Component",
        "description": "Get Component by id.",
        "operationId": "getComponent",
        "parameters": [
          {
            "name": "componentId",
            "in": "path",
            "description": "ID of the Component",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "includeVersions",
            "in": "query",
            "description": "If true, display version details(Default is true)",
            "required": false,
            "example": "E.g. false/true",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "vulnerabilitySummary",
            "in": "query",
            "description": "If true , display vulnerability summary details and hide vulnerability list",
            "required": false,
            "example": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "cvssVersion",
            "in": "query",
            "description": "CVSS Version : This field is required only if vulnerabilitySummary is set to true",
            "required": false,
            "example": "E.g V2",
            "schema": {
              "type": "string",
              "enum": [
                "V2",
                "V3",
                "ANY"
              ]
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedComponentModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/components/{componentId}/versions": {
      "post": {
        "tags": [
          "Component"
        ],
        "summary": "Create a component custom version",
        "description": "Create a component custom version",
        "operationId": "createComponentVersion",
        "parameters": [
          {
            "name": "componentId",
            "in": "path",
            "description": "ID of the Component",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "example": "Bearer JWT_Token",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VersionModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/components/{versionId}/vulnerabilities": {
      "get": {
        "tags": [
          "Component"
        ],
        "summary": "Get Component version vulnerabilities",
        "description": "Get vulnerability details of a component version",
        "operationId": "getVulnerabilties",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "ID of the component version",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size. Number Of Records to fetch per page",
            "required": false,
            "example": "E.g. 1 | default: 25",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Page Number. Index of the page to start with(starts from 1)",
            "required": false,
            "example": "E.g. 1 | default: 1",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/files/{fileId}": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Get details of a file by Id",
        "description": "Get file details of a given fileId. If the remote flag is true, it'll fetch the corresponding remote file info, otherwise by default the flag is false and scanner file information will be shown.",
        "operationId": "getFileDetails",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "ID of the File",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isRemote",
            "in": "query",
            "description": "if true, fetch results of corresponding remote file",
            "required": false,
            "example": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/files/{fileId}/review": {
      "put": {
        "tags": [
          "Files"
        ],
        "summary": "Mark file reviewed/unreviewed",
        "description": "For the given fileId mark as reviewed/unreviewed. Only the Analyst has the permission to do this operation.",
        "operationId": "updateFileReview",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "ID of the File",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isRemote",
            "in": "query",
            "description": "if true, fetch results of corresponding remote file",
            "required": false,
            "example": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "markAsReviewed",
            "in": "query",
            "description": "if true, mark file as reviewed",
            "required": false,
            "example": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/folders": {
      "post": {
        "tags": [
          "Folder"
        ],
        "summary": "Create Folder",
        "description": "Creates a folder for the given name and returns folderId with success message.",
        "operationId": "createFolder",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FolderModel"
              }
            }
          },
          "description": "To create a folder, folderName is required and parentFolderId is optional. ",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/folders/search": {
      "get": {
        "tags": [
          "Folder"
        ],
        "summary": "Get folders based on the name provided",
        "description": "Return folders based on the name provided",
        "operationId": "searchFolders",
        "parameters": [
          {
            "name": "folderName",
            "in": "query",
            "description": "Search happens based on the name given ",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Index of the page to start with",
            "required": false,
            "example": "E.g. 1 | default: 1",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to fetch",
            "required": false,
            "example": "E.g. 25 | default: 25",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/folders/{folderId}": {
      "get": {
        "tags": [
          "Folder"
        ],
        "summary": "Get Folder By Id",
        "description": "Get existing folder by folderId",
        "operationId": "getFolder",
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Folder"
        ],
        "summary": "Update folder details",
        "description": "Update folder details for the given folderId.",
        "operationId": "updateFolder",
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FolderModel"
              }
            }
          },
          "description": "Update details of a folder.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Folder"
        ],
        "summary": "Delete a folder",
        "description": "Deleting a folder will delete all subfolders, contained projects will be associated wih the parent folder(Projects(0)).",
        "operationId": "deleteFolder",
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "ID of the folder",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/importer/importProjectData": {
      "post": {
        "tags": [
          "Deprecated APIs"
        ],
        "summary": "Import Project Data",
        "description": "Imports project data for a given projectId. Only Project Owner and Analyst can Import Project Data into a private project.\nTry it out is not available for this API. This API can be tested using conventional REST API clients such as postman or cURL\nWhen calling this API from a REST client, you need to run curl as follows\ncurl -X POST \"http://HOST:PORT/codeinsight/api/importer/importProjectData?projectId=PROJECT_ID&checkInventory=false&checkReviewed=false&createEmptyInventory=false&overwriteInventoryNotes=true\" -H \"accept: application/json\" -H \"Authorization: Bearer JWT_TOKEN\" -H \"content-type: application/octet-stream\" --data-binary \"@path/filename.zip\" \nSince this is deprecated, you can find the new api under projects api i.e., /projects/{projectId}/import",
        "operationId": "importProjectData",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "description": "ID of the Project",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "checkInventory",
            "in": "query",
            "description": "Check file MD5 for inventory. If enabled, only files with matching MD5 in the import data file and the scanned file will be associated to inventory.",
            "required": false,
            "example": "E.g. true | default: false",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "checkReviewed",
            "in": "query",
            "description": "Check file MD5 for review.  If enabled, only files with matching MD5 in the import data file and the scanned file will be marked as reviewed.",
            "required": false,
            "example": "E.g. true |  default: true",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createEmptyInventory",
            "in": "query",
            "description": "Create inventory even if no matching file is found. By default value of this parameter is retrieved from the Project Setting(On data import or rescan, delete inventory with no associated files). If you wish to override the project setting you can pass true or false. ",
            "required": false,
            "example": "E.g. false |  default: false",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "overwriteInventoryNotes",
            "in": "query",
            "description": "Choose to overwrite or append inventory notes (Audit Notes, Notices Text, Usage Guidance, Remediation Notes). By default notes will be overwritten if the inventory is same. If set to false, notes will be appended to existing ones.",
            "required": false,
            "example": "E.g. true | default: true",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "$ref": "#/components/schemas/InputStream"
              }
            }
          },
          "description": "Project data to import",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/inventories": {
      "post": {
        "tags": [
          "Inventory API"
        ],
        "summary": "create Inventory",
        "description": "create an inventory. Name and Inventory type is a mandatory field.",
        "operationId": "createInventory",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "example": "Bearer JWT_Token",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectInventoryModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/inventories/search": {
      "get": {
        "tags": [
          "Inventory API"
        ],
        "summary": "Get the inventories of file/folder ids",
        "description": "Returns the inventories file and/or folder ids",
        "operationId": "getInventory",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "description": "ID of the Project",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fileIds",
            "in": "query",
            "description": "Provide list of file ids",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "folderIds",
            "in": "query",
            "description": "Provide list of folder ids",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "published",
            "in": "query",
            "description": "If true, then only published inventory items are returned; if false, then only un-published inventory items are returned",
            "required": false,
            "example": "E.g. true | false",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size. Number Of Records to fetch per page",
            "required": false,
            "example": "E.g. 1 | default: 25",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Page Number. Index of the page to start with(starts from 1)",
            "required": false,
            "example": "E.g. 1 | default: 1",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/inventories/{inventoryId}": {
      "get": {
        "tags": [
          "Inventory API"
        ],
        "summary": "Get details of an inventory",
        "description": "Get details of an inventory.",
        "operationId": "getInventoryById",
        "parameters": [
          {
            "name": "inventoryId",
            "in": "path",
            "description": "ID of the Inventory",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skipVulnerabilities",
            "in": "query",
            "description": "If true , hide vulnerabilty details",
            "required": false,
            "example": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Inventory API"
        ],
        "summary": "update Inventory",
        "description": "update an inventory for a given inventoryId.",
        "operationId": "updateInventory",
        "parameters": [
          {
            "name": "inventoryId",
            "in": "path",
            "description": "ID of the Inventory",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InventoryModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Inventory API"
        ],
        "summary": "Delete the inventory",
        "description": "delete inventory",
        "operationId": "deleteInventory",
        "parameters": [
          {
            "name": "inventoryId",
            "in": "path",
            "description": "ID of the Inventory",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/inventories/{inventoryId}/files": {
      "put": {
        "tags": [
          "Inventory API"
        ],
        "summary": "Add Files and/or Folders to Inventory",
        "description": "Add files and/or folders to inventory item and returns the response message",
        "operationId": "addFilesToInventory",
        "parameters": [
          {
            "name": "inventoryId",
            "in": "path",
            "description": "ID of the Inventory",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InventoryFilesModel"
              }
            }
          },
          "description": "To Add files and folders to the inventory provide file and folder paths.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/inventories/{inventoryId}/history": {
      "get": {
        "tags": [
          "Inventory API"
        ],
        "summary": "Get history of an inventory",
        "description": "Fetches the history for a given inventoryId, changes are grouped based on the revision id.",
        "operationId": "fetchHistory",
        "parameters": [
          {
            "name": "inventoryId",
            "in": "path",
            "description": "ID of the Inventory",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size. Number Of Records to fetch per page",
            "required": false,
            "example": "E.g. 1 | default: 25",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Page Number. Index of the page to start with(starts from 1)",
            "required": false,
            "example": "E.g. 1 | default: 1",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/inventories/{inventoryId}/notices": {
      "put": {
        "tags": [
          "Inventory API"
        ],
        "summary": "Update notices text",
        "description": "Update notices text for the given inventory",
        "operationId": "noticesTextInventory",
        "parameters": [
          {
            "name": "inventoryId",
            "in": "path",
            "description": "ID of the Inventory",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "overwrite",
            "in": "query",
            "description": "If true, overwrite notices text",
            "required": false,
            "example": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/inventories/{inventoryId}/publish": {
      "put": {
        "tags": [
          "Inventory API"
        ],
        "summary": "Publish Inventory",
        "description": "Publish an inventory for a given inventoryId",
        "operationId": "publishInventory",
        "parameters": [
          {
            "name": "inventoryId",
            "in": "path",
            "description": "ID of the Inventory",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/inventories/{inventoryId}/recall": {
      "put": {
        "tags": [
          "Inventory API"
        ],
        "summary": "Recall Inventory",
        "description": "Recall an inventory for a given inventoryId",
        "operationId": "recallInventory",
        "parameters": [
          {
            "name": "inventoryId",
            "in": "path",
            "description": "ID of the Inventory",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/inventories/{inventoryId}/status": {
      "put": {
        "tags": [
          "Inventory API"
        ],
        "summary": "inventory status",
        "description": "update an inventory status with DRAFT, APPROVED and REJECTED status.The approve/reject inventory affects Manual Review task only. Any changes made to Inventory will not affect Remediation and Miscellaneous tasks. On Approving Inventory, Inventory gets Approved and Manual review task will be closed with Approve status. On Rejecting Inventory, Inventory gets Rejected by creating an open Remediation task and the Manual review task will be closed with Reject status.",
        "operationId": "updateInventoryStatus",
        "parameters": [
          {
            "name": "inventoryId",
            "in": "path",
            "description": "ID of the Inventory",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "DRAFT",
                "APPROVED",
                "REJECTED"
              ],
              "default": "DRAFT"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/inventories/{inventoryId}/vulnerabilities": {
      "get": {
        "tags": [
          "Inventory API"
        ],
        "summary": "Get vulnerability details of an inventory",
        "description": "Get vulnerability details of an inventory.",
        "operationId": "getVulnerabilties_1",
        "parameters": [
          {
            "name": "inventoryId",
            "in": "path",
            "description": "ID of the Inventory",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size. Number Of Records to fetch per page",
            "required": false,
            "example": "E.g. 1 | default: 25",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Page Number. Index of the page to start with(starts from 1)",
            "required": false,
            "example": "E.g. 1 | default: 1",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/inventories/{inventoryId}/workflows": {
      "get": {
        "tags": [
          "inventoryWorkflow"
        ],
        "summary": "Get workflow details for an inventory",
        "description": "Get workflow details for an inventory",
        "operationId": "getWorkflowByInventoryId",
        "parameters": [
          {
            "name": "inventoryId",
            "in": "path",
            "description": "ID of the Inventory",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "inventoryWorkflow"
        ],
        "summary": "workflows",
        "description": "Create or update workflow for an inventory",
        "operationId": "createWorkflow",
        "parameters": [
          {
            "name": "inventoryId",
            "in": "path",
            "description": "ID of the Inventory",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "example": "Bearer JWT_Token",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InventoryWorkflow"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/jobs": {
      "get": {
        "tags": [
          "Jobs"
        ],
        "summary": "Get jobs details based on filters",
        "description": "Returns jobs in descending order with pagination based on jobType, status, projectId, triggeredBy, jobsHistoryInDays",
        "operationId": "getJobs",
        "parameters": [
          {
            "name": "jobType",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "Project Branching",
                "Project Copy",
                "Project Scan",
                "Project Re-Scan",
                "PDL Update",
                "Audit Report",
                "Notices Report",
                "Project Report",
                "Custom Report",
                "Project Deletion",
                "Export to SBOM Insights",
                "Update Notices"
              ]
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "New",
                "Active",
                "Canceled",
                "Completed",
                "Failed",
                "Scheduled",
                "Terminated",
                "Waiting on update"
              ]
            }
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "Id of the project",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "triggeredBy",
            "in": "query",
            "description": "Login Name of the user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jobsHistoryInDays",
            "in": "query",
            "description": "Days in number. Get jobs in days. (Default=0, All the jobs will be fetched with other filters)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size. Number Of Records to fetch per page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Page Number. Index of the page to start with(starts from 1)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/jobs/notices/{projectId}": {
      "post": {
        "tags": [
          "Jobs"
        ],
        "summary": "Update project notices",
        "description": "Update notices operation will be added to queue. To get status of update notices use jobs/{jobId} API",
        "operationId": "addUpdateNoticesTask",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the Project",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "overwriteAll",
            "in": "query",
            "description": "If true, overwrite all notices text, else update only empty notices texts",
            "required": false,
            "example": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/jobs/sbomexport/{projectId}": {
      "post": {
        "tags": [
          "Jobs"
        ],
        "summary": "Export project inventory to SBOM Insights",
        "description": "Export project to SBOM Insights operation will be added to queue. To get status of Export to SBOM Insights use jobs/{jobId} API",
        "operationId": "addExportToSBOMInsightsTask",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the Project",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/jobs/{jobId}": {
      "get": {
        "tags": [
          "Jobs"
        ],
        "summary": "Get Job details based on the jobId provided",
        "description": "Returns Job details for a given JobId which is obtained from /jobs/all",
        "operationId": "getJobDetails",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "ID of the Job",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/ldap/sync": {
      "post": {
        "tags": [
          "ldap"
        ],
        "summary": "Trigger ldap sync",
        "description": "Trigger on demand ldap sync if already configured.Only the system admin has the permission to do this operation.",
        "operationId": "triggerLdapSync",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK : LDAP sync triggered successfully"
          },
          "403": {
            "description": "FORBIDDEN : User does not have permission to perform this operation,only system admin can perform this operation. Please check and try again"
          },
          "500": {
            "description": "INTERNAL_SERVER_ERROR : Failed to trigger LDAP sync. Please contact your administrator."
          },
          "501": {
            "description": "NOT_IMPLEMENTED : Code Insight is not configured with LDAP. Please contact your administrator"
          },
          "503": {
            "description": "SERVICE_UNAVAILABLE : LDAP sync is already in progress. Please wait for sync to finish"
          }
        }
      }
    },
    "/license/lookup": {
      "get": {
        "tags": [
          "license"
        ],
        "summary": "License Lookup",
        "description": "Returns  id, name, priority, url, description, text, shortName and spdxIdentifier for a given license ID or license Name.",
        "operationId": "licenseLookup",
        "parameters": [
          {
            "name": "licenseId",
            "in": "query",
            "description": "ID of the license",
            "required": false,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "licenseName",
            "in": "query",
            "description": "Full name of the license",
            "required": false,
            "example": "E.g. Apache License 1.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestFormat"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/licenses": {
      "post": {
        "tags": [
          "license"
        ],
        "summary": "Create a custom license",
        "description": "Creates a custom license",
        "operationId": "createLicenses",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LicenseModel"
              }
            }
          },
          "description": "To create a custom license the name, shortName and licenseText is required. \nAllowable values for familyName(Optional) are: \n GNU LGPL 2.1 Style | Artistic License 1.0 Style | Proprietary Style | BSD 3-Clause Style |Apache 1.1 Style | CPL 1.0 Style | MIT Style | Public Domain Style | MPL 1.1 Style | MPL 1.0 Style | Academic Free License Style | Apache 2.0 Style | Sleepycat Style | EPL 1.0 Style | CDDL 1.0 Style | Commercial Style | GNU GPL 3 Style |GNU LGPL 2.0 Style | GNU LGPL 3.0 Style | GNU AGPL 3.0 Style | Ambiguous License Style | GNU GPL 2 Style | Artistic License 2.0 Style | BSD 2-Clause Style | GNU GPL 2 w/CPE Style | CDDL 1.1 Style | Apache 1.0 Style | BSD 4-Clause Style | GNU GPL 2+ Style | GNU GPL 3+ Style | GNU LGPL 2.1+ Style | GNU LGPL 3.0+ Style | GNU LGPL 2.0+ Style | MirOS Style | zlib Style | GNU GPL Style | GNU LGPL Style | GNU AGPL 3.0+ Style",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/licenses/{licenseId}": {
      "patch": {
        "tags": [
          "license"
        ],
        "summary": "Update Licenses External Id",
        "description": "Update Licenses External Id",
        "operationId": "updateLicenseExternalId",
        "parameters": [
          {
            "name": "licenseId",
            "in": "path",
            "description": "ID of the license",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LicenseUpdateModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/licenses/{shortName}/": {
      "get": {
        "tags": [
          "license"
        ],
        "summary": "License lookup based on short name",
        "description": "Returns  id, name, priority, url, description, text and spdxIdentifier for a given shortName.",
        "operationId": "licenseLookupShortName",
        "parameters": [
          {
            "name": "shortName",
            "in": "path",
            "description": "Short name of the license",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestFormat"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/profiles/{projectId}": {
      "get": {
        "tags": [
          "Scan profiles"
        ],
        "summary": "Get profiles for project",
        "description": "Get profiles for project",
        "operationId": "getScanProfile",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/project/createProject": {
      "post": {
        "tags": [
          "Deprecated APIs"
        ],
        "summary": "Create Project",
        "description": "Use the enhanced '/projects' api.",
        "operationId": "createProject_1",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProjectModel"
              }
            }
          },
          "description": "To create a project the projectName field is required and other fields are optional. If the optional fields are left blank, the 'Project Default' values are applied for them.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "500": {
            "description": "Error : error message"
          }
        },
        "deprecated": true
      }
    },
    "/project/exportProjectData": {
      "get": {
        "tags": [
          "Project API"
        ],
        "summary": "Export Project Data",
        "description": "Exports project data for a given projectId. Only Project Admin and Analyst can Export Project Data from a project.\nTry it out is not available for this API. This API can be tested using conventional REST API clients such as postman or cURL.\nWhen calling this API from a REST client, you need to redirect output to a zip file as follows\ncurl -X GET \"http://HOST:PORT/codeinsight/api/project/exportProjectData?projectId=PROJECT_ID\" -H \"accept: application/json\" -H \"Authorization: Bearer JWT_TOKEN\" > export.zip",
        "operationId": "exportProjectData",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "description": "ID of the Project",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InputStream"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: No project named x"
          }
        }
      }
    },
    "/project/generateReport": {
      "get": {
        "tags": [
          "Deprecated APIs"
        ],
        "summary": "Generate Report",
        "description": "This API is deprecated please refer to /projects/{projectId}/reports/{reportId}/generate to Generate a report. \n Refer /projects/{projectId}/reports/{reportId}/download to Download a report.\n Generates Reports (PROJECT, AUDIT, NOTICES, CUSTOM_REPORT) for a given projectId. For CUSTOM_REPORT provide the name of the report. All project users including Observer, Reviewer and Analyst can generate reports for private projects.\nTry it out is not available for this API. This API can be tested using conventional REST API clients such as postman or cURL.\nWhen calling this API from a REST client, you need to redirect output to a zip file as follows\ncurl -X GET \"http://HOST:PORT/codeinsight/api/project/generateReport?reportType=REPORT_TYPE&projectId=PROJECT_ID\" -H \"accept: application/json\" -H \"Authorization: Bearer JWT_TOKEN\" > report.zip",
        "operationId": "generateReport_1",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "description": "ID of the Project",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reportType",
            "in": "query",
            "description": "Report Type",
            "required": true,
            "example": "PROJECT",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "otherProjectId",
            "in": "query",
            "description": "Project Id of the secondary project to be included in the report. This parameter is required, if the enableProjectPicker property for this report type is set to true.",
            "required": false,
            "example": "E.g. 2",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InputStream"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: No project with id x"
          }
        },
        "deprecated": true
      }
    },
    "/project/id": {
      "get": {
        "tags": [
          "Project API"
        ],
        "summary": "Get Project Id",
        "description": "Returns projectId for a given projectName.",
        "operationId": "getProjectId",
        "parameters": [
          {
            "name": "projectName",
            "in": "query",
            "description": "Name of the Project",
            "required": true,
            "example": "E.g. eportal",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: The project name entered was not found"
          }
        }
      }
    },
    "/project/inventory/{projectId}": {
      "get": {
        "tags": [
          "Project API"
        ],
        "summary": "Get Project Inventory",
        "description": "Returns a list of inventory and inventory details for a given project; includes a flag for a short/long version. All project users including Observer, Reviewer and Analyst can view project inventory of private projects.",
        "operationId": "getProjectInventory",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the Project",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skipVulnerabilities",
            "in": "query",
            "description": "If true , hide vulnerability details in the response",
            "required": false,
            "example": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "published",
            "in": "query",
            "description": "If true, then only published inventory items are returned; if false, then only not-published inventory items are returned",
            "required": false,
            "example": "E.g. true | default: true",
            "schema": {
              "type": "string",
              "default": "true"
            }
          },
          {
            "name": "vendor",
            "in": "query",
            "description": "CPE Vendor name",
            "required": false,
            "example": "E.g. gnu",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "product",
            "in": "query",
            "description": "CPE Product name",
            "required": false,
            "example": "E.g. zlib",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Page Size. Number Of Records to fetch per page",
            "required": false,
            "example": "E.g. 1 | default: 100",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Number. Index of the page to start with(starts from 1)",
            "required": false,
            "example": "E.g. 1 | default: 1",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "reviewStatus",
            "in": "query",
            "description": "return items based on the reviewStatus which we selected. Ex: if reviewStatus is APPROVED then only APPROVED items returned",
            "required": false,
            "example": "APPROVED",
            "schema": {
              "type": "string",
              "enum": [
                "READY_TO_REVIEW",
                "DRAFT",
                "APPROVED",
                "REJECTED"
              ]
            }
          },
          {
            "name": "alerts",
            "in": "query",
            "description": "return items based the alert status selected. If alert status selected as OPEN then only open alerts returned",
            "required": false,
            "example": "OPEN",
            "schema": {
              "type": "string",
              "enum": [
                "OPEN",
                "CLOSED",
                "ANY"
              ]
            }
          },
          {
            "name": "includeFiles",
            "in": "query",
            "description": "If true, display the associated files to an Inventory(Default is true)",
            "required": false,
            "example": "E.g. false/true",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryGroup"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: The project Id entered was not found"
          }
        }
      }
    },
    "/project/scanStatus/{taskId}": {
      "get": {
        "tags": [
          "Project API"
        ],
        "summary": "Get Scan Status",
        "description": "Returns a scan status for a given taskId which is obtained from /projectScan/{projectId}",
        "operationId": "getProjectScanStatus",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "ID of the project scan task",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": " SCHEDULED | ACTIVE | TERMINATED | FAILED | COMPLETED",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "NEW",
                    "SCHEDULED",
                    "ACTIVE",
                    "WAITING_ON_UPDATE",
                    "CANCELED",
                    "TERMINATED",
                    "FAILED",
                    "COMPLETED"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request: The task Id entered was not found"
          }
        }
      }
    },
    "/project/uploadProjectCodebase": {
      "post": {
        "tags": [
          "Project API"
        ],
        "summary": "Upload Project Files.",
        "description": "Uploads and extracts a codebase zip file for a project. (* Maximum supported file size is 10GB.). Upload only files with extensions zip,tar,tar.gz and 7z. Do not upload any .gz files directly without archiving it in a tar file. The upload result may come wrong if any compressed files uploaded directly without archiving it. Only Project Admin and Analyst can upload project codebase to a project.  \nTry it out is not available for this API. This API can be tested using conventional REST API clients such as postman or cURL.\nWhen calling this API from a REST client, you need to run curl as follows\ncurl -X POST \"http://HOST:PORT/codeinsight/api/project/uploadProjectCodebase?projectId=PROJECT_ID&deleteExistingFileOnServer=true&expansionLevel=1\" -H \"accept: application/json\" -H \"Authorization: Bearer JWT_TOKEN\" -H \"content-type: application/octet-stream\" --data-binary \"@path/filename.zip\"",
        "operationId": "uploadProject",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "description": "ID of the Project",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "deleteExistingFileOnServer",
            "in": "query",
            "description": "Delete existing files on server. By deleting exiting files on the server, all existing project codebase files will be permanently removed from the scan server. If you rescan the project without replacing these files via a new upload, the scan results for the removed files will be permanently deleted.",
            "required": false,
            "example": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "expansionLevel",
            "in": "query",
            "description": "Codebase expansion level for the project. 1: None | 2: First level | 3: Recursive level . If the expansionLevel parameter is not provided, the codebase will get extracted as 'None' by default.",
            "required": false,
            "example": "E.g. 1,2,3 | default: 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "deleteArchiveAfterExpand",
            "in": "query",
            "description": "Delete inner archives after expansion",
            "required": false,
            "example": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "archiveDirSuffix",
            "in": "query",
            "description": "Suffix to be added to the expanded folder. Value cannot be more than 20 characters and cannot contain the following special characters  \\ / : * ? \" < > | \\0",
            "required": false,
            "example": "Eg : _Expanded",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "$ref": "#/components/schemas/InputStream"
              }
            }
          },
          "description": "Zipped codebase to scan",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/projects": {
      "get": {
        "tags": [
          "Project API"
        ],
        "summary": "Get Projects",
        "description": "Get All The Projects",
        "operationId": "getProjects",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Index of the page to start with",
            "required": false,
            "example": "E.g. 1 | default: 1",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number Of Records to fetch",
            "required": false,
            "example": "E.g. 25 | default: 25",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Project API"
        ],
        "summary": "Create Project",
        "description": "Creates a project for the given input, updates project custom field values and returns projectId with success message.",
        "operationId": "createProject",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectModel"
              }
            }
          },
          "description": "To create a project the projectName field is required and other fields are optional. If the optional fields are left blank, the 'Project Default' values are applied for them. Note: For 'folderName', passing entire folder path like 'folder1/folder2' is not supported.",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/projects/uploadReport": {
      "post": {
        "tags": [
          "Project API"
        ],
        "summary": "Upload Report.",
        "description": "Uploads and extracts a report zip file for a project.curl -H \"Authorization: Bearer %jwt%\" --form projectId=%projectId% --form reportId=%reportId% --form file=@\"pdf_reports.zip\" http://localhost:8888/codeinsight/api/projects/uploadReport",
        "operationId": "uploadReport",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/projects/{projectId}": {
      "get": {
        "tags": [
          "Project API"
        ],
        "summary": "Get Project Information",
        "description": "Get Project Information By Id",
        "operationId": "getProjectById",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the Project",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDetailsDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Project API"
        ],
        "summary": "Update Project",
        "description": "Updates a project, custom field values for the given projectId. \n Here \"owner\" field refers to the \"contact\" of the project.",
        "operationId": "updateProject",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the Project",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExtendedProjectModel"
              }
            }
          },
          "description": "Updates a project, autoPublish is required when markAssociatedFilesAsReviewed and doNotPublishInventoryUnknownLicense is part of a request.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Project API"
        ],
        "summary": "Delete a project, deletion operation will be added to queue. To get status of project deletion use jobs/{jobId} API",
        "description": "Deleting a project will delete all project inventory, custom field values, corresponding notes and all code base files permanently from the server.",
        "operationId": "deleteProject",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the Project",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/projects/{projectId}/allscannedfiles": {
      "get": {
        "tags": [
          "Project API"
        ],
        "summary": "Fetch all scanned files for a project",
        "description": "",
        "operationId": "getAllScannedFiles",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the Project",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "includeMD5Hash",
            "in": "query",
            "description": "if true, display MD5 of the files",
            "required": false,
            "example": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includeSHA1Hash",
            "in": "query",
            "description": "if true, display SHA1 of the files",
            "required": false,
            "example": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Index of the page to start with",
            "required": false,
            "example": "E.g. 1 | default: 1",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number Of Records to fetch",
            "required": false,
            "example": "E.g. 25 | default: 25",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/projects/{projectId}/childProjects": {
      "get": {
        "tags": [
          "Project API"
        ],
        "summary": "get all child projects",
        "description": "Get all child projects. parentProject property will not be shown in the response.",
        "operationId": "getAllChildProjects",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the Project",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "recursive",
            "in": "query",
            "required": false,
            "example": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkedProjectModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/projects/{projectId}/children": {
      "post": {
        "tags": [
          "Project API"
        ],
        "summary": "Add child projects to parent project",
        "description": "Add child projects to parent project.",
        "operationId": "addChildProjects",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Id of Parent Project",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "childProjectIds",
            "in": "query",
            "description": "Id of Child Projects",
            "required": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Project API"
        ],
        "summary": "Remove child Projects from parent project",
        "description": "Remove child project from parent project",
        "operationId": "removeChildProjects",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Id of Parent Project",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "childProjectIds",
            "in": "query",
            "description": "Id of Child Projects",
            "required": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/projects/{projectId}/contact": {
      "get": {
        "tags": [
          "Project API"
        ],
        "summary": "Get Project Contact",
        "description": "Get project contact for the given projectId.",
        "operationId": "getProjectContact",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the Project",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectContact"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Project API"
        ],
        "summary": "Update Project Contact",
        "description": "Updates project contact for the given projectId.",
        "operationId": "updateProjectContact",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the Project",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectContact"
              }
            }
          },
          "description": "Updates a project contact",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/projects/{projectId}/evidences": {
      "get": {
        "tags": [
          "Project API"
        ],
        "summary": "Fetch Evidences for a project",
        "description": "",
        "operationId": "getEvidences",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the Project",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/projects/{projectId}/files": {
      "get": {
        "tags": [
          "Project API"
        ],
        "summary": "Get Id of file or folder",
        "description": "Returns the ID of file and/or folder",
        "operationId": "getFileOrFolderId",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the Project",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filePath",
            "in": "query",
            "description": "Path of File",
            "required": false,
            "example": "git.0/angular/packages/forms/package.json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "folderPath",
            "in": "query",
            "description": "Path of Folder",
            "required": false,
            "example": "git.0/angular/packages/forms",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/projects/{projectId}/import": {
      "post": {
        "tags": [
          "Project API"
        ],
        "summary": "Import Project Data",
        "description": "Imports project data for a given projectId. Only Project Owner and Analyst can Import Project Data into a private project.\nTry it out is not available for this API. This API can be tested using conventional REST API clients such as postman or cURL\nWhen calling this API from a REST client, you need to run either of the curl commands.\nSave the required attributes in a json or a text file for project import and provide that file in the command. If you are using text file, don't give .txt extension.\n curl -H \"Authorization:Bearer %jwt%\" -F importFile=@\"fileToImport.zip\" -F projectImportModel=@\"JsonFile.json Or textFile;type=application/json\" http://localhost:8888/codeinsight/api/projects/%projectId%/import \nOr else, instead of providing file, you can directly define the attributes for projectImportModel inside curly braces.\nProvide 'FileMatchingCriteria' either of the below values: \nCOMPLETE_FILEPATH|PARTIAL_FILEPATH|FILENAME|MD5|MD5_AND_FILENAME|MD5_AND_COMPLETE_FILEPATH|MD5_AND_PARTIAL_FILEPATH",
        "operationId": "importProjectData_1",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/InputStream"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/projects/{projectId}/inventorySummary": {
      "get": {
        "tags": [
          "Project API"
        ],
        "summary": "Get Inventory Summary of the project",
        "description": "Get Project level inventory summary",
        "operationId": "getProjectInventorySummary",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the Project",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "vulnerabilitySummary",
            "in": "query",
            "description": "If false , hide vulnerabilty summary details",
            "required": false,
            "example": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "cvssVersion",
            "in": "query",
            "description": "CVSS : This field is required only if vulnerabilitySummary is set to true",
            "required": false,
            "example": "E.g V2",
            "schema": {
              "type": "string",
              "enum": [
                "V2",
                "V3",
                "ANY"
              ]
            }
          },
          {
            "name": "published",
            "in": "query",
            "description": "If published, then only published inventory items are returned; if unpublished, then only not-published inventory items are returned; if all, then return all inventories",
            "required": false,
            "example": "E.g PUBLISHED",
            "schema": {
              "type": "string",
              "enum": [
                "PUBLISHED",
                "UNPUBLISHED",
                "ALL"
              ],
              "default": "PUBLISHED"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Index of the page to start with",
            "required": false,
            "example": "E.g. 1 | default: 1",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number Of Records to fetch",
            "required": false,
            "example": "E.g. 25 | default: 25",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventorySummaryModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/projects/{projectId}/parentProjects": {
      "get": {
        "tags": [
          "Project API"
        ],
        "summary": "get all parent projects",
        "description": "Get all parent projects. childProject property will not be shown in the response.",
        "operationId": "getAllParentProjects",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the Project",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "recursive",
            "in": "query",
            "required": false,
            "example": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkedProjectModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/projects/{projectId}/reports/{reportId}/download": {
      "get": {
        "tags": [
          "Project API"
        ],
        "summary": "Download Report",
        "description": "Download Reports (PROJECT, AUDIT, NOTICES, CUSTOM_REPORT) for a given projectId. For ALL Reports we need to provide the id of the report. All project users including Observer, Reviewer and Analyst can download reports for private projects. \n If a task is in progress the response will be 202 and the status will be provided in the header for e.g(ACTIVE, SCHEDULED). \nTry it out is not available for this API. This API can be tested using conventional REST API clients such as postman or cURL.\nWhen calling this API from a REST client, you need to redirect output to a zip file as follows\ncurl -X GET \"http://HOST:PORT/codeinsight/api/projects/{projectId}/reports/{reportId}/download?taskId={taskId}\" -H \"accept: application/json\" -H \"Authorization: Bearer JWT_TOKEN\" > report.zip",
        "operationId": "downloadReport",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the Project",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32",
              "pattern": " \\d+"
            }
          },
          {
            "name": "reportId",
            "in": "path",
            "description": "ID of the Report that is to be generated or downloaded",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32",
              "pattern": " \\d+"
            }
          },
          {
            "name": "taskId",
            "in": "query",
            "description": "ID of the Report Task that is to be downloaded",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InputStream"
                }
              }
            }
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/projects/{projectId}/reports/{reportId}/generate": {
      "post": {
        "tags": [
          "Project API"
        ],
        "summary": "Generate Report",
        "description": "Generates Reports (PROJECT, AUDIT, NOTICES, CUSTOM_REPORT) for a given projectId. For ALL Reports we need to provide the id of the report. All project users including Observer, Reviewer and Analyst can generate reports for private projects.",
        "operationId": "generateReport",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the Project",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32",
              "pattern": " \\d+"
            }
          },
          {
            "name": "reportId",
            "in": "path",
            "description": "ID of the Report that is to be generated",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32",
              "pattern": " \\d+"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportsModel"
              }
            }
          },
          "description": "The success response of the generate is a taskId which should be used during download. If the report type is custom report and enableProjectPicker is true otherProjectId is required."
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/projects/{projectId}/scanNodes": {
      "get": {
        "tags": [
          "Project API"
        ],
        "summary": "Fetch all scan nodes (alias) of a project",
        "description": "Returns all the alias node information of a project",
        "operationId": "getScanNodes",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the Project",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/projects/{projectId}/status": {
      "put": {
        "tags": [
          "Project API"
        ],
        "summary": "project status",
        "description": "update project status. After creating the project, the default status is 'Not Started' and the status will be automatically updated to 'Analysis In Progress' after scanning.",
        "operationId": "updateProjectStatus",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the Project",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": true,
            "example": "Analysis In Progress",
            "schema": {
              "type": "string",
              "enum": [
                "Not Started",
                "Analysis In Progress",
                "Analysis Completed",
                "Project Completed"
              ],
              "default": "Not Started"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/projects/{projectId}/users": {
      "get": {
        "tags": [
          "Project API"
        ],
        "summary": "Users",
        "description": "Get Project Users with respect to Role",
        "operationId": "getProjectUserRole",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the Project",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "roleId",
            "in": "query",
            "required": true,
            "example": "E.g. ANALYST",
            "schema": {
              "type": "string",
              "enum": [
                "ANALYST",
                "REVIEWER",
                "OBSERVER",
                "PROJECT_ADMIN"
              ],
              "default": "ANALYST"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Project API"
        ],
        "summary": "Assign Role",
        "description": "Assign a Users to a specific Project Role. \n Here \"ownerId refers to the \"contactId of the project.",
        "operationId": "assignProjectRole",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the Project",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectRoleModel"
              }
            }
          },
          "description": "Add a Users to a specific Project Role. Accepted RoleId: PROJECT_ADMIN, ANALYST, REVIEWER, OBSERVER",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Project API"
        ],
        "summary": "Unassign Project Role",
        "description": "Remove User(s) from a specific Project Role",
        "operationId": "unassignProjectRoles",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the Project",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/usersRole"
              }
            }
          },
          "description": "Remove User(s) from a specific Project Role. Accepted RoleId: PROJECT_ADMIN, ANALYST, REVIEWER, OBSERVER",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/reports": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Get Reports",
        "description": "Get existing reports",
        "operationId": "searchReports",
        "parameters": [
          {
            "name": "reportId",
            "in": "query",
            "description": "ID of the Report to be used in search",
            "required": false,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Index of the page to start with",
            "required": false,
            "example": "E.g. 1 | default: 1",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number Of Records to fetch",
            "required": false,
            "example": "E.g. 25 | default: 25",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of the Report to be used in search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path",
            "in": "query",
            "description": "Path of the Script to be used in search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enabled",
            "in": "query",
            "description": "Enabled status of the Report to be used in search",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "default",
            "in": "query",
            "description": "Default status of the Report to be used in search",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order of the Report to be used in search",
            "required": false,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Create Report",
        "description": "Add new report. All the report options, if given will have datatype as String/text.",
        "operationId": "createReport",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportModel"
              }
            }
          },
          "description": "Add new report.",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Reports"
        ],
        "summary": "Update Report",
        "description": "Update existing report",
        "operationId": "updateReport",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExtendedReportModel"
              }
            }
          },
          "description": "Update existing report.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/reports/{reportId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Get Report By Id",
        "description": "Get existing report by reportId",
        "operationId": "getReport",
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Reports"
        ],
        "summary": "Delete Report by Id",
        "description": "Delete the report by report id",
        "operationId": "deleteReport",
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/rules": {
      "get": {
        "tags": [
          "Rules"
        ],
        "summary": "Get Rules",
        "description": "Get existing custom rules",
        "operationId": "getRules",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Index of the page to start with",
            "required": false,
            "example": "E.g. 1 | default: 1",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number Of Records to fetch",
            "required": false,
            "example": "E.g. 25 | default: 25",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "Create Rule",
        "description": "Add new rule with either file info or rule info.\n**Note:** Value for detectionCriteria is an array of string Eg. detectionCriteria: [\"filepath1 or folderpath1\",\"filepath2 or folderpath2\"].\n Parameters fileInfo and ruleInfo are mutually exclusive.",
        "operationId": "createRule",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RuleModel"
              }
            }
          },
          "description": "Add new rule.",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Rules"
        ],
        "summary": "Update Rule",
        "description": "Update existing rule.\n**Note:** Value for detectionCriteria is an array of string Eg. detectionCriteria: [\"filepath1 or folderpath1\",\"filepath2 or folderpath2\"].\n Parameters fileInfo and ruleInfo are mutually exclusive.",
        "operationId": "updateRule",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExtendedRuleModel"
              }
            }
          },
          "description": "Update existing rule.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/rules/{ruleId}": {
      "get": {
        "tags": [
          "Rules"
        ],
        "summary": "Get Rule By Id",
        "description": "Get existing rule by ruleId",
        "operationId": "getRule",
        "parameters": [
          {
            "name": "ruleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Rules"
        ],
        "summary": "Delete Rule",
        "description": "Delete existing rule",
        "operationId": "deleteRule",
        "parameters": [
          {
            "name": "ruleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/scanResource/projectScan/{projectId}": {
      "post": {
        "tags": [
          "Scan API"
        ],
        "summary": "Project Scan",
        "description": "Initiates a scan for a given project, specified by the projectId. Returns the taskId corresponding to the scan task. The taskId can be used to check the scan status. Only Project Admin and Analyst can invoke a scan of a project.",
        "operationId": "addProjectScanTask",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the project",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fullRescan",
            "in": "query",
            "description": "Irrespective of codebase changes, pass value as true to perform a full scan of the codebase",
            "required": false,
            "example": "E.g. false |  default: false",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: The project Id entered was not found"
          },
          "409": {
            "description": "Conflict: Project is already in queue or already being scanned"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/scmInstances": {
      "get": {
        "tags": [
          "sourceCodeManagement"
        ],
        "summary": "scmInstances",
        "description": "Fetch details of scm instances of a project.",
        "operationId": "getSCMInstance",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "scmType",
            "in": "query",
            "required": false,
            "example": "GIT|TFS|PERFORCE|SUBVERSION",
            "schema": {
              "type": "string",
              "enum": [
                "TFS",
                "GIT",
                "SUBVERSION",
                "PERFORCE"
              ]
            }
          },
          {
            "name": "instanceId",
            "in": "query",
            "description": "ID of the SCM instance",
            "required": false,
            "example": "E.g. 0",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "example": "Bearer JWT_Token",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SCMModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "sourceCodeManagement"
        ],
        "summary": "scmInstances",
        "description": "Test connection api for scm instances",
        "operationId": "testSCMInstanceConnection",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "scmType",
            "in": "query",
            "required": true,
            "example": "GIT|TFS|PERFORCE|SUBVERSION",
            "schema": {
              "type": "string",
              "enum": [
                "TFS",
                "GIT",
                "SUBVERSION",
                "PERFORCE"
              ],
              "default": "GIT"
            }
          },
          {
            "name": "instanceId",
            "in": "query",
            "description": "ID of the SCM instance",
            "required": true,
            "example": "E.g. 0",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "example": "Bearer JWT_Token",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "sourceCodeManagement"
        ],
        "summary": "scmInstances",
        "description": "Deletes an instance of a particular SCMType.",
        "operationId": "deleteSCMInstance",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "scmType",
            "in": "query",
            "required": true,
            "example": "GIT|TFS|PERFORCE|SUBVERSION",
            "schema": {
              "type": "string",
              "enum": [
                "TFS",
                "GIT",
                "SUBVERSION",
                "PERFORCE"
              ],
              "default": "GIT"
            }
          },
          {
            "name": "instanceId",
            "in": "query",
            "description": "ID of the SCM instance",
            "required": true,
            "example": "E.g. 0",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "example": "Bearer JWT_Token",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/scmInstances/Git": {
      "post": {
        "tags": [
          "sourceCodeManagement"
        ],
        "summary": "Git scmInstances",
        "description": "Create a new instance of Git SCM. \n **url*** - Enter one repository URL and branch/ tag/ commit ID in individual fields or one or more repository URLs separated by comma.\n You can include a branch, tag, or commit ID notation as part of the URL.\n **userName/password** - userName/password for authenticated access to the repository. Leave blank for anonymous or SSH access. \n **branch/commitId/tag** - branch, tag or commit ID. Specify one of these values. Or leave blank to sync to the master branch.\n These three fields will be considered only when single URL is provided without branch/ tag/ commit ID properties in the URL.",
        "operationId": "createGITSCMInstance",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "example": "Bearer JWT_Token",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/GITSCMModel"
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "sourceCodeManagement"
        ],
        "summary": "Git scmInstances",
        "description": "Updates an instance of Git SCM. \n **url*** - Enter one repository URL and branch/ tag/ commit ID in individual fields or one or more repository URLs separated by comma.\n You can include a branch, tag, or commit ID notation as part of the URL.\n **userName/password** - userName/password for authenticated access to the repository. Leave blank for anonymous or SSH access.\n **branch/commitId/tag** - branch, tag or commit ID. Specify one of these values. Or leave blank to sync to the master branch.\n These three fields will be considered only when single URL is provided without branch/ tag/ commit ID properties in the URL.",
        "operationId": "updateGITSCMInstance",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "instanceId",
            "in": "query",
            "description": "ID of the SCM instance",
            "required": true,
            "example": "E.g. 0",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "example": "Bearer JWT_Token",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/GITSCMModel"
        },
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/scmInstances/Perforce": {
      "post": {
        "tags": [
          "sourceCodeManagement"
        ],
        "summary": "Perforce scmInstances",
        "description": "Create a new instance of Perforce SCM. \n **url** - URL in the format: &lt;protocol&gt;:&lt;host&gt;:&lt;port&gt;/&lt;depot&gt;,or else configured P4PORT will be taken a default url.\n **userName/password** - userName/password or else configured P4USER/P4PASSWD will be taken a default .\n **branchSpec** - branchSpec(&lt;Depot&gt;/&lt;ProjectPath&gt;)\n **changeListNum/label** - changeListNum/label Or leave blank to sync to the head revision.",
        "operationId": "createPerforceSCMInstance",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "example": "Bearer JWT_Token",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PerforceSCMModel"
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "sourceCodeManagement"
        ],
        "summary": "Perforce scmInstances",
        "description": "Updates an instance of Perforce SCM.",
        "operationId": "updatePerforceSCMInstance",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "instanceId",
            "in": "query",
            "description": "ID of the SCM instance",
            "required": true,
            "example": "E.g. 0",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "example": "Bearer JWT_Token",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PerforceSCMModel"
        },
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/scmInstances/Subversion": {
      "post": {
        "tags": [
          "sourceCodeManagement"
        ],
        "summary": "Subversion scmInstances",
        "description": "Create a new instance of Subversion SCM. \n**url*** - URL in the format: &lt;protocol&gt;://&lt;host&gt;/&lt;svnroot&gt;/&lt;repository&gt;\n**userName/password** - userName/password or leave blank for anonymous connection\n**revisionNumber** - revision for which you want to create workspace and run scan on the same.",
        "operationId": "createSVNSCMInstance",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "example": "Bearer JWT_Token",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SubversionSCMModel"
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "sourceCodeManagement"
        ],
        "summary": "Subversion scmInstances",
        "description": "Updates an instance of Subversion SCM.",
        "operationId": "updateSVNSCMInstance",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "instanceId",
            "in": "query",
            "description": "ID of the SCM instance",
            "required": true,
            "example": "E.g. 0",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "example": "Bearer JWT_Token",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SubversionSCMModel"
        },
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/scmInstances/TFS": {
      "post": {
        "tags": [
          "sourceCodeManagement"
        ],
        "summary": "TFS scmInstances",
        "description": "Create a new instance of TFS SCM. \n**url*** - URL in the below format:\n&lt;protocol&gt;:&lt;host&gt;:&lt;port&gt;/&lt;tfsroot&gt;/&lt;collection&gt;/&lt;project&gt;\nURL format for TFS 2016 and above:\n&lt;protocol&gt;:&lt;host&gt;:&lt;port&gt;/&lt;collection&gt;/&lt;project&gt;\n**userName/password*** - userName/password for authentication\n**changeSet** - changeset you wish to sync.If Changeset is not provided, latest revision will be synced unless Label is specified.\n**label** - Label you wish to sync. If Label is not provided, latest revision will be synced unless changeset is specified.",
        "operationId": "createTFSSCMInstance",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "example": "Bearer JWT_Token",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/TFSSCMModel"
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "sourceCodeManagement"
        ],
        "summary": "TFS scmInstances",
        "description": "Updates an instance of TFS SCM.",
        "operationId": "updateTFSSCMInstance",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "description": "ID of the project",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "instanceId",
            "in": "query",
            "description": "ID of the SCM instance",
            "required": true,
            "example": "E.g. 0",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "example": "Bearer JWT_Token",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/TFSSCMModel"
        },
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/tasks": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Create Task",
        "description": "Create Task",
        "operationId": "createTask",
        "parameters": [
          {
            "name": "inventoryId",
            "in": "query",
            "description": "ID of the inventory to be used to create the task",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowTaskModel"
              }
            }
          },
          "description": "Create new workflow task \t\n priority :\"LOW, MEDIUM, HIGH\" \n type : \"MISCELLANEOUS, MANUAL_INVENTORY_REVIEW, REMEDIATE_INVENTORY\"",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/tasks/search": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Get Tasks based on the search Terms",
        "description": "Return Tasks associated with the search term",
        "operationId": "searchTask",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "description": "ID of the Project to be used in search",
            "required": false,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "inventoryId",
            "in": "query",
            "description": "ID of the inventory to be used in search",
            "required": false,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Index of the page to start with",
            "required": false,
            "example": "E.g. 1 | default: 1",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number Of Records to fetch",
            "required": false,
            "example": "E.g. 25 | default: 25",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of the Task to be used in search",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "OPEN",
                "CLOSED"
              ],
              "default": "ALL"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of the Task to be used in search",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "MISCELLANEOUS",
                "MANUAL_INVENTORY_REVIEW",
                "REMEDIATE_INVENTORY",
                "ALL"
              ],
              "default": "ALL"
            }
          },
          {
            "name": "priority",
            "in": "query",
            "description": "Priority of the Task to be used in search",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "LOW",
                "MEDIUM",
                "HIGH"
              ],
              "default": "ALL"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/tasks/{taskId}": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Get Task",
        "description": "Get Task",
        "operationId": "getTask",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "ID of the task to be fetched",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Task"
        ],
        "summary": "Update Task",
        "description": "Update Task",
        "operationId": "updateTask",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "ID of the task to be updated",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExtendedWorkflowTaskModel"
              }
            }
          },
          "description": "Update existing workflow task \t\n priority :\"LOW, MEDIUM, HIGH\"",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/tasks/{taskId}/close": {
      "put": {
        "tags": [
          "Task"
        ],
        "summary": "Close Task",
        "description": "Close Task",
        "operationId": "closeTask",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "ID of the task to be closed",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "resolution",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "CLOSED",
                "APPROVED",
                "REJECTED"
              ],
              "default": "CLOSED"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/tasks/{taskId}/issues": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Assign Alm Issues",
        "description": "Assign Alm Issues to task",
        "operationId": "assignAlmIssuesToTask",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "ID of the task to be updated",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlmIssues"
              }
            }
          },
          "description": "Map alm Issues to workflow task",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/tasks/{taskId}/reassign": {
      "put": {
        "tags": [
          "Task"
        ],
        "summary": "Reassign Task",
        "description": "Reassign Task",
        "operationId": "reassignTask",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "ID of the task to be reassigned",
            "required": true,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ownerId",
            "in": "query",
            "description": "ID / Name of the owner to whom the task needs to be reassigned",
            "required": true,
            "example": "E.g. admin",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/users": {
      "post": {
        "tags": [
          "User API"
        ],
        "summary": "Create User",
        "description": "Creates a user",
        "operationId": "createUser",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserModel"
              }
            }
          },
          "description": "To create a user the login, First Name, Last Name, Email, Password, Question, Answer field is required.",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/users/search": {
      "get": {
        "tags": [
          "User API"
        ],
        "summary": "Search Users",
        "description": "Search User By id or login",
        "operationId": "searchUser",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "example": 1,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "login",
            "in": "query",
            "required": false,
            "example": "admin",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "required": false,
            "example": "admin@gmail.com",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/users/{loginId}/activate": {
      "put": {
        "tags": [
          "User API"
        ],
        "summary": "activate User",
        "description": "Activate a User",
        "operationId": "activateUser",
        "parameters": [
          {
            "name": "loginId",
            "in": "path",
            "description": "loginId",
            "required": true,
            "example": "E.g. admin",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "Bearer JWT Token",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/users/{loginId}/deactivate": {
      "put": {
        "tags": [
          "User API"
        ],
        "summary": "deactivate User",
        "description": "Deactivate a User",
        "operationId": "deactivateUser",
        "parameters": [
          {
            "name": "loginId",
            "in": "path",
            "description": "loginId",
            "required": true,
            "example": "E.g. admin",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "Bearer JWT Token",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/users/{loginId}/permission": {
      "put": {
        "tags": [
          "User API"
        ],
        "summary": "manage Permission",
        "description": "Manage User Permission for the existing user in the system. This will remove the permission mapped earlier and the current request permissions will be considered always.",
        "operationId": "managePermission",
        "parameters": [
          {
            "name": "loginId",
            "in": "path",
            "description": "loginId",
            "required": true,
            "example": "E.g. admin",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionsWrapper"
              }
            }
          },
          "description": "list of permission is a required field. Allowable permission are system_admin, edit_policy, create_project"
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/vulnerability/suppress": {
      "get": {
        "tags": [
          "vulnerability"
        ],
        "summary": "Get suppressed vulnerabilities",
        "description": "Get suppressed vulnerabilities based on componentId/vulnerabilityName or both, either of them is mandatory.Only the system administrator has the permission to do this operation.",
        "operationId": "getSuppressedVulnerability",
        "parameters": [
          {
            "name": "componentId",
            "in": "query",
            "description": "ID of the Component",
            "required": false,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "vulnerabilityName",
            "in": "query",
            "description": "Name of the vulnerability",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size. Number Of Records to fetch per page",
            "required": false,
            "example": "E.g. 1 | default: 25",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Page Number. Index of the page to start with(starts from 1)",
            "required": false,
            "example": "E.g. 1 | default: 1",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuppressedVulnerabilityModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "vulnerability"
        ],
        "summary": "Suppress vulnerability",
        "description": "Suppress vulnerability for component version(s). Only system administrator has the permission to perform this operation.",
        "operationId": "suppressVulnerability",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VulnerabilitySuppressModel"
              }
            }
          },
          "description": "Input model to suppress vulnerability for component versions.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VulnerabilitySuppressModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/vulnerability/suppress/details": {
      "get": {
        "tags": [
          "vulnerability"
        ],
        "summary": "Get vulnerability suppress details",
        "description": "Get vulnerability suppress details. Provide suppressId/versionId or both as inputs, either of them is mandatory.Only the system administrator has the permission to do this operation.",
        "operationId": "getSuppressedVulnerabilityDetails",
        "parameters": [
          {
            "name": "suppressId",
            "in": "query",
            "description": "ID of suppression",
            "required": false,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "componentVersionId",
            "in": "query",
            "description": "Id of component version",
            "required": false,
            "example": "E.g. 1",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size. Number Of Records to fetch per page",
            "required": false,
            "example": "E.g. 1 | default: 25",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Page Number. Index of the page to start with(starts from 1)",
            "required": false,
            "example": "E.g. 1 | default: 1",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionSuppressModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/vulnerability/unSuppress": {
      "post": {
        "tags": [
          "vulnerability"
        ],
        "summary": "UnSuppress vulnerability",
        "description": "UnSuppress a vulnerability for given component versions. Only the system administrator has the permission to do this operation.",
        "operationId": "unSuppressVulnerability",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Bearer JWT Token",
            "required": true,
            "example": "E.g. Bearer JWT_TOKEN",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VulnerabilityUnsuppressModel"
              }
            }
          },
          "description": "Input model to unSuppress vulnerability",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "/codeinsight/api/"
    }
  ],
  "components": {
    "requestBodies": {
      "PerforceSCMModel": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PerforceSCMModel"
            }
          }
        },
        "required": true
      },
      "GITSCMModel": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GITSCMModel"
            }
          }
        },
        "required": true
      },
      "SubversionSCMModel": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SubversionSCMModel"
            }
          }
        },
        "required": true
      },
      "TFSSCMModel": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TFSSCMModel"
            }
          }
        },
        "required": true
      }
    },
    "schemas": {
      "AlmIssues": {
        "type": "object",
        "required": [
          "ids"
        ],
        "properties": {
          "ids": {
            "type": "array",
            "description": "almIssueId",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "CVEData": {
        "type": "object",
        "properties": {
          "versionId": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "cvssv2Score": {
            "type": "number"
          },
          "cvssv2Severity": {
            "type": "string"
          },
          "cvssv3Score": {
            "type": "number"
          },
          "cvssv3Severity": {
            "type": "string"
          },
          "publishedDate": {
            "type": "string"
          },
          "modifiedDate": {
            "type": "string"
          }
        }
      },
      "Component": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "default": {
            "type": "boolean",
            "default": false
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "displayName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "licenses": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/License"
            }
          },
          "title": {
            "type": "string"
          },
          "versions": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/ComponentVersion"
            }
          },
          "url": {
            "type": "string"
          },
          "sortedVersions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComponentVersion"
            }
          },
          "componentForge": {
            "$ref": "#/components/schemas/ComponentForge"
          },
          "externalId": {
            "type": "string"
          },
          "componentCPEs": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/ComponentCPELib"
            }
          },
          "encryption": {
            "type": "boolean",
            "default": false
          },
          "custom": {
            "type": "boolean",
            "default": false
          },
          "modified": {
            "type": "boolean",
            "default": false
          },
          "sortedLicenses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/License"
            }
          },
          "lastUpdateDate": {
            "type": "string",
            "format": "date-time"
          },
          "registeredDate": {
            "type": "string",
            "format": "date-time"
          },
          "flagMask": {
            "type": "integer",
            "format": "int32"
          },
          "popularity": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "enum": [
              "COMPONENT",
              "COMPONENT_VERSION",
              "WEBSITE",
              "PUBLICATION"
            ]
          }
        }
      },
      "ComponentCPEKey": {
        "type": "object",
        "properties": {
          "component": {
            "$ref": "#/components/schemas/ComponentImpl"
          },
          "cpeName": {
            "type": "string"
          }
        }
      },
      "ComponentCPELib": {
        "type": "object",
        "properties": {
          "cpeKey": {
            "$ref": "#/components/schemas/ComponentCPEKey"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "cpeVendor": {
            "type": "string"
          },
          "cpeProduct": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean",
            "default": false
          },
          "custom": {
            "type": "boolean",
            "default": false
          },
          "deleted": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "ComponentCPEModel": {
        "type": "object",
        "properties": {
          "cpeName": {
            "type": "string",
            "example": "E.g.  cpe://a:gnome:gedit",
            "description": "cpeName"
          },
          "cpeVendor": {
            "type": "string",
            "example": "Vendor name",
            "description": "cpeVendor"
          },
          "cpeProduct": {
            "type": "string",
            "example": "Product name",
            "description": "cpeProduct"
          }
        }
      },
      "ComponentForge": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean",
            "default": false
          },
          "createDate": {
            "type": "string",
            "format": "date-time"
          },
          "updateDate": {
            "type": "string",
            "format": "date-time"
          },
          "data": {
            "type": "string"
          }
        }
      },
      "ComponentImpl": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "encryption": {
            "type": "boolean",
            "default": false
          },
          "flagMask": {
            "type": "integer",
            "format": "int32"
          },
          "modified": {
            "type": "boolean",
            "default": false
          },
          "externalId": {
            "type": "string"
          },
          "lastUpdateDate": {
            "type": "string",
            "format": "date-time"
          },
          "popularity": {
            "type": "integer",
            "format": "int32"
          },
          "registeredDate": {
            "type": "string",
            "format": "date-time"
          },
          "deprecated": {
            "type": "boolean",
            "default": false
          },
          "componentForge": {
            "$ref": "#/components/schemas/ComponentForge"
          },
          "libVersions": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/ComponentVersionLib"
            }
          },
          "customVersions": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/ComponentVersionCustom"
            }
          },
          "licenses": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/License"
            }
          },
          "componentCPEs": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/ComponentCPELib"
            }
          },
          "suppressedVulnerabilities": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/VulnerabilitySuppressEntity"
            }
          },
          "default": {
            "type": "boolean",
            "default": false
          },
          "type": {
            "type": "string",
            "enum": [
              "COMPONENT",
              "COMPONENT_VERSION",
              "WEBSITE",
              "PUBLICATION"
            ]
          },
          "displayName": {
            "type": "string"
          },
          "versions": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/ComponentVersion"
            }
          },
          "sortedVersions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComponentVersion"
            }
          },
          "custom": {
            "type": "boolean",
            "default": false
          },
          "sortedLicenses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/License"
            }
          }
        }
      },
      "ComponentListModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "forge": {
            "type": "string"
          },
          "versionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VersionListModel"
            }
          },
          "licenseList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LicenseListModel"
            }
          },
          "cpeList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComponentCPEModel"
            }
          }
        }
      },
      "ComponentModel": {
        "type": "object",
        "required": [
          "name",
          "title",
          "url"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "Comp1",
            "description": "name",
            "minLength": 0,
            "maxLength": 127,
            "pattern": "^[a-zA-Z0-9\\.\\_\\-]+$"
          },
          "title": {
            "type": "string",
            "example": "Component1",
            "description": "title",
            "minLength": 0,
            "maxLength": 255
          },
          "url": {
            "type": "string",
            "example": "http://abc@xyz.com | NA",
            "description": "url",
            "minLength": 0,
            "maxLength": 2400,
            "pattern": "(NA|^https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&\\/\\/=]*))"
          },
          "description": {
            "type": "string",
            "example": "This is a custom component.",
            "description": "description",
            "minLength": 0,
            "maxLength": 65535
          },
          "encryption": {
            "type": "string",
            "example": "E.g. YES | default: NO",
            "description": "encryption",
            "pattern": "YES|NO",
            "enum": [
              "YES",
              "NO"
            ]
          },
          "forgeId": {
            "type": "integer",
            "format": "int32",
            "example": "E.g. 2 | default: 1",
            "description": "forgeId",
            "minimum": 1
          }
        }
      },
      "ComponentRestFormat": {
        "type": "object",
        "properties": {
          "listId": {
            "type": "integer",
            "format": "int32"
          },
          "componentId": {
            "type": "integer",
            "format": "int64"
          },
          "encryption": {
            "type": "boolean",
            "default": false
          },
          "vulnerabilities": {
            "type": "boolean",
            "default": false
          },
          "forge": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "versions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Versions"
            }
          },
          "licenseRestFormat": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Licenses"
            }
          }
        }
      },
      "ComponentVersion": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string",
            "enum": [
              "COMPONENT",
              "COMPONENT_VERSION",
              "WEBSITE",
              "PUBLICATION"
            ]
          },
          "displayName": {
            "type": "string"
          },
          "licenses": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/License"
            }
          },
          "component": {
            "$ref": "#/components/schemas/ComponentImpl"
          },
          "customVulnerabilities": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/VulnerabilityCustom"
            }
          },
          "versionName": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean",
            "default": false
          },
          "vulnerabilities": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/Vulnerability"
            }
          },
          "sortedLicenses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/License"
            }
          },
          "displayVersionName": {
            "type": "string"
          }
        }
      },
      "ComponentVersionCustom": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "versionName": {
            "type": "string"
          },
          "component": {
            "$ref": "#/components/schemas/ComponentImpl"
          },
          "customVulnerabilities": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/VulnerabilityCustom"
            }
          },
          "libVulnerabilities": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/VulnerabilityLib"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "COMPONENT",
              "COMPONENT_VERSION",
              "WEBSITE",
              "PUBLICATION"
            ]
          },
          "displayName": {
            "type": "string"
          },
          "licenses": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/License"
            }
          },
          "deprecated": {
            "type": "boolean",
            "default": false
          },
          "vulnerabilities": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/Vulnerability"
            }
          },
          "sortedLicenses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/License"
            }
          },
          "displayVersionName": {
            "type": "string"
          }
        }
      },
      "ComponentVersionLib": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "versionName": {
            "type": "string"
          },
          "flagMask": {
            "type": "integer",
            "format": "int32"
          },
          "releaseDate": {
            "type": "string",
            "format": "date-time"
          },
          "modified": {
            "type": "boolean",
            "default": false
          },
          "custom": {
            "type": "boolean",
            "default": false
          },
          "externalId": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean",
            "default": false
          },
          "component": {
            "$ref": "#/components/schemas/ComponentImpl"
          },
          "flavors": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/ComponentVersionMetaData"
            }
          },
          "libVulnerabilities": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/VulnerabilityLib"
            }
          },
          "libAddVulnerabilities": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/VulnerabilityLib"
            }
          },
          "customVulnerabilities": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/VulnerabilityCustom"
            }
          },
          "versionLicenses": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/License"
            }
          },
          "default": {
            "type": "boolean",
            "default": false
          },
          "type": {
            "type": "string",
            "enum": [
              "COMPONENT",
              "COMPONENT_VERSION",
              "WEBSITE",
              "PUBLICATION"
            ]
          },
          "displayName": {
            "type": "string"
          },
          "licenses": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/License"
            }
          },
          "vulnerabilities": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/Vulnerability"
            }
          },
          "sortedLicenses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/License"
            }
          },
          "displayVersionName": {
            "type": "string"
          },
          "versionLabels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ComponentVersionMetaData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "componentVersion": {
            "$ref": "#/components/schemas/ComponentVersion"
          },
          "flavor": {
            "type": "string"
          }
        }
      },
      "CreateProjectModel": {
        "type": "object",
        "required": [
          "projectName"
        ],
        "properties": {
          "projectName": {
            "type": "string",
            "example": "eportal",
            "description": "projectName"
          },
          "projectType": {
            "type": "string",
            "example": "INVENTORY_ONLY | default: STANDARD",
            "description": "projectType",
            "enum": [
              "INVENTORY_ONLY | STANDARD"
            ]
          },
          "description": {
            "type": "string",
            "example": "description",
            "description": "description"
          },
          "projectFolderName": {
            "type": "string",
            "example": "eportal-v1",
            "description": "projectFolderName"
          },
          "policyProfileName": {
            "type": "string",
            "example": "Default License Policy Profile",
            "description": "policyProfileName"
          },
          "scanProfileName": {
            "type": "string",
            "example": "Basic Scan - Without CL | default: Standard Scan Profile",
            "description": "scanProfileName",
            "enum": [
              "Basic Scan Profile (Without CL) | Standard Scan Profile | Comprehensive Scan Profile"
            ]
          },
          "ownerLogin": {
            "type": "string",
            "example": "admin",
            "description": "ownerLogin"
          },
          "risk": {
            "type": "string",
            "example": "HIGH | default: MEDIUM",
            "description": "risk",
            "enum": [
              "HIGH | MEDIUM | LOW"
            ]
          },
          "privateProject": {
            "type": "string",
            "example": "false",
            "description": "privateProject"
          },
          "autoPublish": {
            "type": "string",
            "example": "true",
            "description": "autoPublish"
          },
          "markAssociatedFilesAsReviewed": {
            "type": "string",
            "example": "true",
            "description": "markAssociatedFilesAsReviewed"
          }
        }
      },
      "CustomFieldModel": {
        "type": "object",
        "required": [
          "id",
          "value"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "example": "1",
            "description": "id",
            "minimum": 1
          },
          "value": {
            "type": "string",
            "example": "Value for custom field",
            "description": "value"
          }
        }
      },
      "ExtendedComponentModel": {
        "type": "object",
        "required": [
          "name",
          "title",
          "url"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "Comp1",
            "description": "name",
            "minLength": 0,
            "maxLength": 127,
            "pattern": "^[a-zA-Z0-9\\.\\_\\-]+$"
          },
          "title": {
            "type": "string",
            "example": "Component1",
            "description": "title",
            "minLength": 0,
            "maxLength": 255
          },
          "url": {
            "type": "string",
            "example": "http://abc@xyz.com | NA",
            "description": "url",
            "minLength": 0,
            "maxLength": 2400,
            "pattern": "(NA|^https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&\\/\\/=]*))"
          },
          "description": {
            "type": "string",
            "example": "This is a custom component.",
            "description": "description",
            "minLength": 0,
            "maxLength": 65535
          },
          "encryption": {
            "type": "string",
            "example": "E.g. YES | default: NO",
            "description": "encryption",
            "pattern": "YES|NO",
            "enum": [
              "YES",
              "NO"
            ]
          },
          "forgeId": {
            "type": "integer",
            "format": "int32",
            "example": "E.g. 2 | default: 1",
            "description": "forgeId",
            "minimum": 1
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "forge": {
            "type": "string"
          },
          "versionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VersionModel"
            }
          },
          "licenseList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LicenseModel"
            }
          },
          "componentCPEList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComponentCPEModel"
            }
          }
        }
      },
      "ExtendedProjectModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "eportal",
            "description": "name"
          },
          "description": {
            "type": "string",
            "example": "description",
            "description": "description"
          },
          "folderName": {
            "type": "string",
            "example": "Projects",
            "description": "folderName"
          },
          "policyProfileName": {
            "type": "string",
            "example": "Default License Policy Profile",
            "description": "policyProfileName"
          },
          "scanProfileName": {
            "type": "string",
            "example": "Basic Scan Profile (Without CL)",
            "description": "scanProfileName"
          },
          "autoPublish": {
            "type": "boolean",
            "example": "true",
            "description": "autoPublish",
            "default": false
          },
          "markAssociatedFilesAsReviewed": {
            "type": "boolean",
            "example": "true",
            "description": "markAssociatedFilesAsReviewed",
            "default": false
          },
          "owner": {
            "type": "string",
            "example": "admin",
            "description": "owner"
          },
          "risk": {
            "type": "string",
            "example": "HIGH | default: MEDIUM",
            "description": "risk",
            "pattern": "HIGH|MEDIUM|LOW",
            "enum": [
              "HIGH",
              "MEDIUM",
              "LOW"
            ]
          },
          "privateProject": {
            "type": "boolean",
            "example": "false",
            "description": "privateProject",
            "default": false
          },
          "deleteEmptyInventory": {
            "type": "boolean",
            "example": "false",
            "description": "deleteEmptyInventory",
            "default": false
          },
          "doNotPublishInventoryUnknownLicense": {
            "type": "boolean",
            "example": "true",
            "description": "doNotPublishInventoryUnknownLicense",
            "default": false
          },
          "folderId": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "customFields": {
            "type": "array",
            "description": "customFields",
            "items": {
              "$ref": "#/components/schemas/CustomFieldModel"
            }
          }
        }
      },
      "ExtendedReportModel": {
        "type": "object",
        "required": [
          "name",
          "order",
          "path"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "example": "1",
            "description": "id"
          },
          "name": {
            "type": "string",
            "example": "Name of the report",
            "description": "name"
          },
          "path": {
            "type": "string",
            "example": "Path of the report",
            "description": "path"
          },
          "enabled": {
            "type": "boolean",
            "example": "true",
            "description": "enabled",
            "default": false
          },
          "order": {
            "type": "integer",
            "format": "int32",
            "example": "4",
            "description": "order",
            "minimum": 1
          },
          "enableProjectPicker": {
            "type": "boolean",
            "example": "Set this property to true, if this report is applicable across more than one project.",
            "description": "enableProjectPicker",
            "default": false
          },
          "reportOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportCriteriaModel"
            }
          }
        }
      },
      "ExtendedRuleModel": {
        "type": "object",
        "required": [
          "componentId",
          "licenseId",
          "versionId"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": "1",
            "description": "id"
          },
          "componentId": {
            "type": "integer",
            "format": "int64",
            "example": "1",
            "description": "componentId",
            "minimum": 1
          },
          "versionId": {
            "type": "integer",
            "format": "int64",
            "example": "1",
            "description": "versionId",
            "minimum": 1
          },
          "licenseId": {
            "type": "integer",
            "format": "int64",
            "example": "1",
            "description": "licenseId",
            "minimum": 1
          },
          "description": {
            "type": "string",
            "example": "description",
            "description": "description"
          },
          "url": {
            "type": "string",
            "example": "https://www.flexera.com/",
            "description": "url",
            "minLength": 0,
            "maxLength": 2400,
            "pattern": "(NA|^https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&\\/\\/=]*))"
          },
          "noticesText": {
            "type": "string",
            "example": "Sample Notices Text",
            "description": "noticesText"
          },
          "auditNotes": {
            "type": "string",
            "example": "Sample Audit Notes",
            "description": "auditNotes"
          },
          "asFoundLicenseText": {
            "type": "string",
            "example": "Sample from file LICENSE.txt in file @file in the materials",
            "description": "asFoundLicenseText"
          },
          "fileInfo": {
            "type": "array",
            "description": "fileInfo",
            "items": {
              "$ref": "#/components/schemas/FileInfo"
            }
          },
          "ruleInfo": {
            "type": "array",
            "description": "ruleInfo",
            "items": {
              "$ref": "#/components/schemas/RuleInfo"
            }
          }
        }
      },
      "ExtendedWorkflowTaskModel": {
        "type": "object",
        "properties": {
          "summary": {
            "type": "string",
            "example": "Summary for the task",
            "description": "summary"
          },
          "priority": {
            "type": "string",
            "example": "MEDIUM",
            "description": "priority",
            "enum": [
              "LOW",
              "MEDIUM",
              "HIGH"
            ]
          },
          "details": {
            "type": "string",
            "example": "Details of the task",
            "description": "details"
          }
        }
      },
      "FileInfo": {
        "type": "object",
        "required": [
          "md5",
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "fileName",
            "description": "name"
          },
          "md5": {
            "type": "string",
            "example": "md5",
            "description": "md5"
          }
        }
      },
      "FolderModel": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "SCA",
            "description": "name",
            "minLength": 1,
            "maxLength": 255
          },
          "parentFolderId": {
            "type": "integer",
            "format": "int32",
            "example": "1",
            "description": "parentFolderId",
            "minimum": 1
          }
        }
      },
      "GITSCMModel": {
        "type": "object",
        "required": [
          "url"
        ],
        "properties": {
          "url": {
            "type": "string",
            "example": "E.g. https://host.xz/path/to/repo.git or https://host.xz/path/to/repo.git~~branch1 or user@host:path/repo.git>>cmID123 or https://host.xz/path/to/repo.git^^tag1.1",
            "description": "url",
            "minLength": 0,
            "maxLength": 65535
          },
          "userName": {
            "type": "string",
            "example": "abc",
            "description": "userName",
            "minLength": 0,
            "maxLength": 255
          },
          "password": {
            "type": "string",
            "example": "abc",
            "description": "password",
            "minLength": 0,
            "maxLength": 255
          },
          "branch": {
            "type": "string",
            "example": "master",
            "description": "branch",
            "minLength": 0,
            "maxLength": 255
          },
          "commitId": {
            "type": "string",
            "description": "commitId",
            "minLength": 0,
            "maxLength": 255
          },
          "tag": {
            "type": "string",
            "description": "tag",
            "minLength": 0,
            "maxLength": 255
          }
        }
      },
      "InputStream": {
        "type": "object"
      },
      "InventoryFilesModel": {
        "type": "object",
        "properties": {
          "filePaths": {
            "type": "array",
            "description": "filePaths",
            "items": {
              "type": "string"
            }
          },
          "folderPaths": {
            "type": "array",
            "description": "folderPaths",
            "items": {
              "type": "string"
            }
          },
          "markAssociatedFilesAsReviewed": {
            "type": "boolean",
            "example": "false",
            "description": "markAssociatedFilesAsReviewed",
            "default": false
          }
        }
      },
      "InventoryFlexField": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "inventoryId": {
            "type": "integer",
            "format": "int32"
          },
          "flexField1": {
            "type": "string"
          },
          "flexField2": {
            "type": "string"
          },
          "flexField3": {
            "type": "string"
          },
          "flexField4": {
            "type": "string"
          },
          "flexField5": {
            "type": "string"
          }
        }
      },
      "InventoryGroup": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "git",
            "description": "Inventory group name"
          },
          "priority": {
            "$ref": "#/components/schemas/PicklistValue"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "example": "1",
            "description": "Inventory group id"
          },
          "owner": {
            "type": "string",
            "example": "antlr",
            "description": "Owner"
          },
          "description": {
            "type": "string",
            "example": "Description",
            "description": "Description"
          },
          "status": {
            "type": "string",
            "enum": [
              "UNUSED0",
              "UNUSED1",
              "UNUSED2",
              "UNUSED3",
              "DRAFT",
              "READY_TO_REVIEW",
              "APPROVED",
              "REJECTED"
            ]
          },
          "license": {
            "$ref": "#/components/schemas/License"
          },
          "url": {
            "type": "string",
            "example": "http://www.antlr.org",
            "description": "Url"
          },
          "projectId": {
            "type": "integer",
            "format": "int32",
            "example": "1",
            "description": "Project Id"
          },
          "autoDetectionNotes": {
            "type": "string",
            "example": "Note",
            "description": "detection notes"
          },
          "vulnerabilityAlerts": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/VulnerabilityAlert"
            }
          },
          "associatedLicense": {
            "$ref": "#/components/schemas/License"
          },
          "rejectedByUpdate": {
            "type": "boolean",
            "default": false
          },
          "statusPolicyId": {
            "type": "integer",
            "format": "int32"
          },
          "systemGenerated": {
            "type": "boolean",
            "example": "True",
            "description": "System generated",
            "default": false
          },
          "workflowURL": {
            "type": "string"
          },
          "openVulnerabilityAlerts": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/VulnerabilityAlert"
            }
          },
          "closedVulnerabilityAlerts": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/VulnerabilityAlert"
            }
          },
          "provenanceId": {
            "type": "integer",
            "format": "int32"
          },
          "disclosed": {
            "type": "boolean",
            "example": "True",
            "description": "is Disclosed",
            "default": false
          },
          "confidence": {
            "type": "string",
            "example": "1",
            "description": "Confidence",
            "enum": [
              "HIGHEST",
              "HIGH",
              "MEDIUM",
              "LOW"
            ]
          },
          "fileCount": {
            "type": "integer",
            "format": "int32",
            "example": "2000",
            "description": "File count"
          },
          "inventoryType": {
            "type": "string",
            "enum": [
              "WORK_IN_PROGRESS",
              "COMPONENT",
              "WEBSITE",
              "PUBLICATION",
              "LICENSE"
            ]
          },
          "distributed": {
            "type": "string",
            "example": "Unknown",
            "description": "distribution type",
            "enum": [
              "UNKNOWN",
              "INTERNAL",
              "EXTERNAL",
              "HOSTED"
            ]
          },
          "partOfProduct": {
            "type": "string",
            "example": "Unknown",
            "description": "part of product",
            "enum": [
              "NO",
              "YES",
              "UNKNOWN"
            ]
          },
          "linking": {
            "type": "string",
            "example": "Unknown",
            "description": "link type",
            "enum": [
              "UNKNOWN",
              "NOT_LINKED",
              "STATIC",
              "DYNAMIC"
            ]
          },
          "published": {
            "type": "boolean",
            "example": "True",
            "description": "is published",
            "default": false
          },
          "modified": {
            "type": "string",
            "example": "Unknown",
            "description": "modified",
            "enum": [
              "NO",
              "YES",
              "UNKNOWN"
            ]
          },
          "encrypted": {
            "type": "string",
            "example": "Unknown",
            "description": "encryption",
            "enum": [
              "NO",
              "YES",
              "UNKNOWN"
            ]
          },
          "noticeText": {
            "type": "string",
            "example": "Notice text",
            "description": "Notices text"
          },
          "usageText": {
            "type": "string",
            "example": "usage",
            "description": "get usage text"
          },
          "priorityId": {
            "type": "integer",
            "format": "int32"
          },
          "createDate": {
            "type": "string",
            "format": "date-time",
            "example": "2017-09-11 12:13:09.0",
            "description": "Create on"
          },
          "updateDate": {
            "type": "string",
            "format": "date-time",
            "example": "2017-10-24 13:04:26.0",
            "description": "updatedOn"
          },
          "asFoundLicenseText": {
            "type": "string",
            "example": "Sample from file LICENSE.txt in file ePortal-2.0",
            "description": "As found license text"
          },
          "repositoryItem": {
            "$ref": "#/components/schemas/RepositoryItem"
          },
          "associatedComponent": {
            "$ref": "#/components/schemas/Component"
          },
          "remediationNotes": {
            "type": "string",
            "example": "update this immediately",
            "description": "Remediation notes"
          },
          "auditorReviewNotes": {
            "type": "string",
            "example": "good to go",
            "description": "audit notes"
          },
          "associatedComponentVersion": {
            "$ref": "#/components/schemas/ComponentVersion"
          },
          "publishedDate": {
            "type": "string",
            "format": "date-time",
            "example": "2017-10-24 13:04:26.0",
            "description": "publishedOn"
          },
          "autoStatus": {
            "type": "string",
            "enum": [
              "DRAFT",
              "PUBLISHED",
              "NEEDS_REVIEW"
            ]
          },
          "parentGroupId": {
            "type": "integer",
            "format": "int32"
          },
          "links": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/InventoryLink"
            }
          }
        }
      },
      "InventoryGroupImpl": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "example": "1",
            "description": "Inventory group id"
          },
          "name": {
            "type": "string",
            "example": "git",
            "description": "Inventory group name"
          },
          "description": {
            "type": "string",
            "example": "Description",
            "description": "Description"
          },
          "owner": {
            "type": "string",
            "example": "antlr",
            "description": "Owner"
          },
          "projectId": {
            "type": "integer",
            "format": "int32",
            "example": "1",
            "description": "Project Id"
          },
          "systemGenerated": {
            "type": "boolean",
            "example": "True",
            "description": "System generated",
            "default": false
          },
          "createDate": {
            "type": "string",
            "format": "date-time",
            "example": "2017-09-11 12:13:09.0",
            "description": "Create on"
          },
          "updateDate": {
            "type": "string",
            "format": "date-time",
            "example": "2017-10-24 13:04:26.0",
            "description": "updatedOn"
          },
          "publishedDate": {
            "type": "string",
            "format": "date-time",
            "example": "2017-10-24 13:04:26.0",
            "description": "publishedOn"
          },
          "autoStatus": {
            "type": "string",
            "enum": [
              "DRAFT",
              "PUBLISHED",
              "NEEDS_REVIEW"
            ]
          },
          "repositoryItem": {
            "$ref": "#/components/schemas/RepositoryItemImpl"
          },
          "license": {
            "$ref": "#/components/schemas/License"
          },
          "auditorReviewNotes": {
            "type": "string",
            "example": "good to go",
            "description": "audit notes"
          },
          "remediationNotes": {
            "type": "string",
            "example": "update this immediately",
            "description": "Remediation notes"
          },
          "autoDetectionNotes": {
            "type": "string",
            "example": "Note",
            "description": "detection notes"
          },
          "url": {
            "type": "string",
            "example": "http://www.antlr.org",
            "description": "Url"
          },
          "asFoundLicenseText": {
            "type": "string",
            "example": "Sample from file LICENSE.txt in file ePortal-2.0",
            "description": "As found license text"
          },
          "status": {
            "type": "string",
            "enum": [
              "UNUSED0",
              "UNUSED1",
              "UNUSED2",
              "UNUSED3",
              "DRAFT",
              "READY_TO_REVIEW",
              "APPROVED",
              "REJECTED"
            ]
          },
          "statusPolicyId": {
            "type": "integer",
            "format": "int32"
          },
          "priority": {
            "$ref": "#/components/schemas/PicklistValue"
          },
          "priorityId": {
            "type": "integer",
            "format": "int32"
          },
          "published": {
            "type": "boolean",
            "example": "True",
            "description": "is published",
            "default": false
          },
          "disclosed": {
            "type": "boolean",
            "example": "True",
            "description": "is Disclosed",
            "default": false
          },
          "modified": {
            "type": "string",
            "example": "Unknown",
            "description": "modified",
            "enum": [
              "NO",
              "YES",
              "UNKNOWN"
            ]
          },
          "usageText": {
            "type": "string",
            "example": "usage",
            "description": "get usage text"
          },
          "noticeText": {
            "type": "string",
            "example": "Notice text",
            "description": "Notices text"
          },
          "fileCount": {
            "type": "integer",
            "format": "int32",
            "example": "2000",
            "description": "File count"
          },
          "parentGroupId": {
            "type": "integer",
            "format": "int32"
          },
          "rejectedByUpdate": {
            "type": "boolean",
            "default": false
          },
          "confidence": {
            "type": "string",
            "example": "1",
            "description": "Confidence",
            "enum": [
              "HIGHEST",
              "HIGH",
              "MEDIUM",
              "LOW"
            ]
          },
          "partOfProduct": {
            "type": "string",
            "example": "Unknown",
            "description": "part of product",
            "enum": [
              "NO",
              "YES",
              "UNKNOWN"
            ]
          },
          "linking": {
            "type": "string",
            "example": "Unknown",
            "description": "link type",
            "enum": [
              "UNKNOWN",
              "NOT_LINKED",
              "STATIC",
              "DYNAMIC"
            ]
          },
          "workflowURL": {
            "type": "string"
          },
          "provenanceId": {
            "type": "integer",
            "format": "int32"
          },
          "links": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/InventoryLink"
            }
          },
          "flexFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryFlexField"
            }
          },
          "vulnerabilityAlerts": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/VulnerabilityAlert"
            }
          },
          "associatedLicense": {
            "$ref": "#/components/schemas/License"
          },
          "openVulnerabilityAlerts": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/VulnerabilityAlert"
            }
          },
          "closedVulnerabilityAlerts": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/VulnerabilityAlert"
            }
          },
          "inventoryType": {
            "type": "string",
            "enum": [
              "WORK_IN_PROGRESS",
              "COMPONENT",
              "WEBSITE",
              "PUBLICATION",
              "LICENSE"
            ]
          },
          "distributed": {
            "type": "string",
            "example": "Unknown",
            "description": "distribution type",
            "enum": [
              "UNKNOWN",
              "INTERNAL",
              "EXTERNAL",
              "HOSTED"
            ]
          },
          "encrypted": {
            "type": "string",
            "example": "Unknown",
            "description": "encryption",
            "enum": [
              "NO",
              "YES",
              "UNKNOWN"
            ]
          },
          "associatedComponent": {
            "$ref": "#/components/schemas/Component"
          },
          "associatedComponentVersion": {
            "$ref": "#/components/schemas/ComponentVersion"
          }
        }
      },
      "InventoryLink": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "linkType": {
            "type": "string",
            "enum": [
              "BUNDLED",
              "DEPENDENCY",
              "POSSIBLY_RELATED"
            ]
          },
          "parent": {
            "$ref": "#/components/schemas/InventoryGroupImpl"
          },
          "child": {
            "$ref": "#/components/schemas/InventoryGroupImpl"
          }
        }
      },
      "InventoryModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "maven-artifact 3.6.1 (Apache-2.0)",
            "description": "name",
            "minLength": 1,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "example": "Sources: scm:git:https://git-wip-us.apache.org/repos/asf/maven.git",
            "description": "description"
          },
          "url": {
            "type": "string",
            "example": "https://repo1.maven.org/maven2/org/apache/maven/maven-artifact",
            "description": "url",
            "pattern": "(@)?(href=')?(HREF=')?(HREF=\")?(href=\")?(http://)?(https://)?[a-zA-Z_0-9\\-]+(\\.\\w[a-zA-Z_0-9\\-]+)+(/[#&\\n\\-=?\\+\\%/\\.\\w]+)?"
          },
          "disclosed": {
            "type": "string",
            "example": "YES | NO",
            "description": "disclosed",
            "pattern": "YES|NO",
            "enum": [
              "YES",
              "NO"
            ]
          },
          "distribution": {
            "type": "string",
            "example": "UNKNOWN | INTERNAL | EXTERNAL | HOSTED",
            "description": "distribution",
            "pattern": "UNKNOWN|INTERNAL|EXTERNAL|HOSTED",
            "enum": [
              "UNKNOWN",
              "INTERNAL",
              "EXTERNAL",
              "HOSTED"
            ]
          },
          "partOfProduct": {
            "type": "string",
            "example": "UNKNOWN | YES | NO",
            "description": "partOfProduct",
            "pattern": "UNKNOWN|YES|NO",
            "enum": [
              "UNKNOWN",
              "YES",
              "NO"
            ]
          },
          "linking": {
            "type": "string",
            "example": "UNKNOWN | NOT_LINKED | STATIC | DYNAMIC",
            "description": "linking",
            "pattern": "UNKNOWN|NOT_LINKED|STATIC|DYNAMIC",
            "enum": [
              "UNKNOWN",
              "NOT_LINKED",
              "STATIC",
              "DYNAMIC"
            ]
          },
          "modified": {
            "type": "string",
            "example": "UNKNOWN | YES | NO",
            "description": "modified",
            "pattern": "UNKNOWN|YES|NO",
            "enum": [
              "UNKNOWN",
              "YES",
              "NO"
            ]
          },
          "encryption": {
            "type": "string",
            "example": "UNKNOWN | YES | NO",
            "description": "encryption",
            "pattern": "UNKNOWN|YES|NO",
            "enum": [
              "UNKNOWN",
              "YES",
              "NO"
            ]
          },
          "auditorReviewNotes": {
            "type": "string",
            "description": "auditorReviewNotes"
          },
          "noticeText": {
            "type": "string",
            "description": "noticeText"
          },
          "usageGuidance": {
            "type": "string",
            "description": "usageGuidance"
          },
          "remediationNotes": {
            "type": "string",
            "description": "remediationNotes"
          },
          "confidenceLevel": {
            "type": "string",
            "example": "HIGH | MEDIUM | LOW default: HIGH",
            "description": "confidenceLevel",
            "pattern": "HIGH|MEDIUM|LOW",
            "enum": [
              "HIGH",
              "MEDIUM",
              "LOW"
            ]
          },
          "inventoryType": {
            "type": "string",
            "example": "COMPONENT | LICENSE | WORK_IN_PROGRESS",
            "description": "inventoryType",
            "pattern": "COMPONENT|LICENSE|WORK_IN_PROGRESS"
          },
          "component": {
            "$ref": "#/components/schemas/component"
          },
          "licenseId": {
            "type": "string",
            "example": "158",
            "description": "licenseId"
          },
          "workflowURL": {
            "type": "string",
            "example": "SVM-123 | https://www.example.com | default: None",
            "description": "workflowURL"
          },
          "invProvenanceId": {
            "type": "integer",
            "format": "int32",
            "example": "1",
            "description": "invProvenanceId",
            "minimum": 1
          },
          "customFields": {
            "type": "array",
            "description": "customFields",
            "items": {
              "$ref": "#/components/schemas/CustomFieldModel"
            }
          }
        }
      },
      "InventorySummaryModel": {
        "type": "object",
        "properties": {
          "itemNumber": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "priority": {
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "confidence": {
            "type": "string",
            "enum": [
              "HIGHEST",
              "HIGH",
              "MEDIUM",
              "LOW"
            ]
          },
          "componentId": {
            "type": "string"
          },
          "componentName": {
            "type": "string"
          },
          "componentVersionId": {
            "type": "string"
          },
          "componentVersionName": {
            "type": "string"
          },
          "reviewStatus": {
            "type": "string"
          },
          "selectedLicenseId": {
            "type": "string"
          },
          "selectedLicenseSPDXIdentifier": {
            "type": "string"
          },
          "vulnerabilitySummary": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      },
      "InventoryWorkflow": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "Item": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string",
            "enum": [
              "COMPONENT",
              "COMPONENT_VERSION",
              "WEBSITE",
              "PUBLICATION"
            ]
          },
          "displayName": {
            "type": "string"
          }
        }
      },
      "JobModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "jobType": {
            "type": "string",
            "description": "Job type",
            "enum": [
              "Project Branching",
              "Project Copy",
              "Project Scan",
              "Project Re-Scan",
              "PDL Update",
              "Data Garbage Collection",
              "Audit Report",
              "Notices Report",
              "Project Report",
              "Custom Report"
            ]
          },
          "project": {
            "$ref": "#/components/schemas/Project"
          },
          "status": {
            "type": "string",
            "description": "status of the Job",
            "enum": [
              "NEW",
              "ACTIVE",
              "CANCELED",
              "COMPLETED",
              "FAILED",
              "SCHEDULED",
              "TERMINATED",
              "WAITING_ON_UPDATE"
            ]
          },
          "triggeredBy": {
            "$ref": "#/components/schemas/TriggeredBy"
          },
          "queuedOn": {
            "type": "string",
            "example": "2017-10-24 13:04:26.0",
            "description": "queuedOn"
          },
          "activatedOn": {
            "type": "string",
            "example": "2017-10-24 13:04:26.0",
            "description": "activatedOn"
          },
          "completedOn": {
            "type": "string",
            "example": "2017-10-24 13:04:26.0",
            "description": "completedOn"
          },
          "jobDetails": {
            "type": "string"
          },
          "error": {
            "type": "string"
          }
        }
      },
      "Json": {
        "type": "object"
      },
      "License": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "shortName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "category": {
            "type": "string",
            "enum": [
              "CATEGORY1",
              "CATEGORY2",
              "CATEGORY3",
              "CATEGORY4",
              "CATEGORY5"
            ]
          },
          "notes": {
            "type": "string"
          },
          "iconUrl": {
            "type": "string"
          },
          "flagMask": {
            "type": "integer",
            "format": "int32"
          },
          "modified": {
            "type": "boolean",
            "default": false
          },
          "custom": {
            "type": "boolean",
            "default": false
          },
          "externalId": {
            "type": "string"
          },
          "family": {
            "type": "boolean",
            "default": false
          },
          "parentId": {
            "type": "integer",
            "format": "int64"
          },
          "addToPalamidaCL": {
            "type": "boolean",
            "default": false
          },
          "author": {
            "type": "string"
          },
          "dfsgCompatible": {
            "type": "boolean",
            "default": false
          },
          "familyName": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean",
            "default": false
          },
          "noticeAttributionStatements": {
            "type": "string"
          },
          "noticeCopyrightStatements": {
            "type": "string"
          },
          "osiLicenseCategory": {
            "type": "string"
          },
          "osiLicenseName": {
            "type": "string"
          },
          "patentLicenseGrant": {
            "type": "boolean",
            "default": false
          },
          "publishedDate": {
            "type": "string",
            "format": "date-time"
          },
          "publisher": {
            "type": "string"
          },
          "spdxLicenseIdentifier": {
            "type": "string"
          },
          "spdxLicenseName": {
            "type": "string"
          },
          "userUpdated": {
            "type": "boolean",
            "default": false
          },
          "version": {
            "type": "string"
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          },
          "components": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "object"
            }
          },
          "componentVersions": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "object"
            }
          },
          "obligations": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/LicenseObligation"
            }
          },
          "default": {
            "type": "boolean",
            "default": false
          },
          "displayName": {
            "type": "string"
          },
          "gplv3Compatible": {
            "type": "boolean",
            "default": false
          },
          "gplv2Compatible": {
            "type": "boolean",
            "default": false
          },
          "freeSoftwareLicense": {
            "type": "boolean",
            "default": false
          },
          "spdxIdentifierOrName": {
            "type": "string"
          },
          "spdxNameOrName": {
            "type": "string"
          },
          "commercial": {
            "type": "boolean",
            "default": false
          },
          "screenName": {
            "type": "string"
          },
          "screenText": {
            "type": "string"
          },
          "osiapproved": {
            "type": "boolean",
            "default": false
          },
          "copyleft": {
            "type": "boolean",
            "default": false
          },
          "abbrevName": {
            "type": "string"
          }
        }
      },
      "LicenseListModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "priority": {
            "type": "string"
          },
          "externalId": {
            "type": "string"
          }
        }
      },
      "LicenseModel": {
        "type": "object",
        "required": [
          "licenseText",
          "name",
          "shortName"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "General Public License",
            "description": "name",
            "minLength": 0,
            "maxLength": 127
          },
          "shortName": {
            "type": "string",
            "example": "GPL",
            "description": "shortName",
            "minLength": 0,
            "maxLength": 255
          },
          "licenseText": {
            "type": "string",
            "example": "License Text",
            "description": "licenseText",
            "minLength": 0,
            "maxLength": 16777215
          },
          "priority": {
            "type": "string",
            "example": "E.g. P1 | P2 | P3 | default: P3",
            "description": "priority",
            "pattern": "P1|P2|P3",
            "enum": [
              "P1",
              "P2",
              "P3"
            ]
          },
          "url": {
            "type": "string",
            "example": "https://abc.xyz",
            "description": "url",
            "minLength": 0,
            "maxLength": 2400,
            "pattern": "(^https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&\\/\\/=]*))"
          },
          "description": {
            "type": "string",
            "example": "License description",
            "description": "description",
            "minLength": 0,
            "maxLength": 65535
          },
          "familyName": {
            "type": "string",
            "example": "License family",
            "description": "familyName"
          },
          "externalId": {
            "type": "string",
            "example": "External License Id Eg: 156",
            "description": "externalId"
          }
        }
      },
      "LicenseObligation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "instruction": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ObligationType"
          },
          "required": {
            "type": "boolean",
            "default": false
          },
          "priority": {
            "$ref": "#/components/schemas/ObligationPriority"
          },
          "organization": {
            "$ref": "#/components/schemas/ObligationOrganization"
          },
          "triggerAction": {
            "$ref": "#/components/schemas/ObligationTriggerAction"
          },
          "licenseTextSection": {
            "type": "string"
          },
          "licenseTextFragment": {
            "type": "string"
          }
        }
      },
      "LicenseRestFormat": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          },
          "url": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "shortName": {
            "type": "string"
          },
          "spdxIdentifier": {
            "type": "string"
          },
          "externalId": {
            "type": "string"
          }
        }
      },
      "LicenseUpdateModel": {
        "type": "object",
        "properties": {
          "externalId": {
            "type": "string",
            "example": "External License Id Eg:156",
            "description": "externalId"
          }
        }
      },
      "Licenses": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "LinkedProjectModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "childProject": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/LinkedProjectModel"
            }
          },
          "parentProject": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/LinkedProjectModel"
            }
          }
        }
      },
      "ObligationOrganization": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "ObligationPriority": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "ObligationTriggerAction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "ObligationType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Password": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "password": {
            "type": "string"
          },
          "createDate": {
            "type": "string",
            "format": "date-time"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "PerforceSCMModel": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "url",
            "minLength": 0,
            "maxLength": 2400
          },
          "userName": {
            "type": "string",
            "example": "abc",
            "description": "userName",
            "minLength": 0,
            "maxLength": 255
          },
          "password": {
            "type": "string",
            "example": "abc",
            "description": "password",
            "minLength": 0,
            "maxLength": 255
          },
          "branchSpec": {
            "type": "string",
            "description": "branchSpec",
            "minLength": 0,
            "maxLength": 255
          },
          "changeListNum": {
            "type": "string",
            "description": "changeListNum",
            "minLength": 0,
            "maxLength": 255
          },
          "label": {
            "type": "string",
            "description": "label",
            "minLength": 0,
            "maxLength": 255
          }
        }
      },
      "PermissionsWrapper": {
        "type": "object",
        "required": [
          "permissions"
        ],
        "properties": {
          "permissions": {
            "type": "array",
            "description": "permissions",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PicklistValue": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "enum": [
              "INVENTORY_STATUS",
              "INVENTORY_PRIORITY"
            ]
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "isDefault": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "Project": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "ProjectContact": {
        "type": "object",
        "required": [
          "contact"
        ],
        "properties": {
          "contact": {
            "type": "string",
            "example": "admin",
            "description": "contact"
          }
        }
      },
      "ProjectDetailsDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "dateCreated": {
            "type": "string"
          },
          "scanPaths": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          },
          "scanProfileName": {
            "type": "string"
          },
          "policyProfileName": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "risk": {
            "type": "string"
          },
          "projectVisibiity": {
            "type": "string"
          },
          "legalContactName": {
            "type": "string"
          },
          "securityContactName": {
            "type": "string"
          },
          "devContactName": {
            "type": "string"
          },
          "projectStatus": {
            "type": "string"
          },
          "scanServerAlias": {
            "type": "string"
          },
          "totalFiles": {
            "type": "integer",
            "format": "int64"
          },
          "codebaseSize": {
            "type": "string"
          },
          "numberOfLines": {
            "type": "integer",
            "format": "int64"
          },
          "projectPath": {
            "type": "string"
          },
          "childProjects": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/LinkedProjectModel"
            }
          },
          "parentProjects": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/LinkedProjectModel"
            }
          },
          "licenses": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int32"
            }
          },
          "vulnerabilities": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "customFields": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "deleteEmptyInventory": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "ProjectImportModel": {
        "type": "object",
        "required": [
          "addFilesToInventory",
          "markFilesAsReviewed"
        ],
        "properties": {
          "createEmptyInventory": {
            "type": "boolean",
            "example": "false",
            "description": "createEmptyInventory",
            "default": false
          },
          "overwriteInventoryNotes": {
            "type": "boolean",
            "example": "true",
            "description": "overwriteInventoryNotes",
            "default": false
          },
          "addFilesToInventory": {
            "type": "boolean",
            "example": "true",
            "description": "addFilesToInventory",
            "default": false
          },
          "inventoryFileMatchingCriteria": {
            "type": "string",
            "example": "COMPLETE_FILEPATH",
            "description": "inventoryFileMatchingCriteria",
            "pattern": "COMPLETE_FILEPATH|PARTIAL_FILEPATH|FILENAME|MD5|MD5_AND_FILENAME|MD5_AND_COMPLETE_FILEPATH|MD5_AND_PARTIAL_FILEPATH"
          },
          "inventoryDirectoryDepth": {
            "type": "integer",
            "format": "int32",
            "example": "null",
            "description": "inventoryDirectoryDepth",
            "minimum": 1,
            "maximum": 20
          },
          "markFilesAsReviewed": {
            "type": "boolean",
            "example": "true",
            "description": "markFilesAsReviewed",
            "default": false
          },
          "reviewFileMatchingCriteria": {
            "type": "string",
            "example": "MD5_AND_COMPLETE_FILEPATH",
            "description": "reviewFileMatchingCriteria",
            "pattern": "COMPLETE_FILEPATH|PARTIAL_FILEPATH|FILENAME|MD5|MD5_AND_FILENAME|MD5_AND_COMPLETE_FILEPATH|MD5_AND_PARTIAL_FILEPATH"
          },
          "reviewDirectoryDepth": {
            "type": "integer",
            "format": "int32",
            "example": "null",
            "description": "reviewDirectoryDepth",
            "minimum": 1,
            "maximum": 20
          },
          "resetInventoryUsage": {
            "type": "boolean",
            "example": "E.g. true | default: true",
            "description": "resetInventoryUsage",
            "default": false
          }
        }
      },
      "ProjectInventoryModel": {
        "type": "object",
        "required": [
          "projectId"
        ],
        "properties": {
          "projectId": {
            "type": "integer",
            "format": "int32",
            "example": "1",
            "description": "projectId",
            "minimum": 1
          },
          "inventoryModel": {
            "$ref": "#/components/schemas/InventoryModel"
          }
        }
      },
      "ProjectModel": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "eportal",
            "description": "name"
          },
          "description": {
            "type": "string",
            "example": "description",
            "description": "description"
          },
          "folderName": {
            "type": "string",
            "example": "Projects",
            "description": "folderName"
          },
          "policyProfileName": {
            "type": "string",
            "example": "Default License Policy Profile",
            "description": "policyProfileName"
          },
          "scanProfileName": {
            "type": "string",
            "example": "Basic Scan Profile (Without CL)",
            "description": "scanProfileName"
          },
          "autoPublish": {
            "type": "boolean",
            "example": "true",
            "description": "autoPublish",
            "default": false
          },
          "markAssociatedFilesAsReviewed": {
            "type": "boolean",
            "example": "true",
            "description": "markAssociatedFilesAsReviewed",
            "default": false
          },
          "owner": {
            "type": "string",
            "example": "admin",
            "description": "owner"
          },
          "risk": {
            "type": "string",
            "example": "HIGH | default: MEDIUM",
            "description": "risk",
            "pattern": "HIGH|MEDIUM|LOW",
            "enum": [
              "HIGH",
              "MEDIUM",
              "LOW"
            ]
          },
          "privateProject": {
            "type": "boolean",
            "example": "false",
            "description": "privateProject",
            "default": false
          },
          "scanServerAlias": {
            "type": "string",
            "example": "null",
            "description": "scanServerAlias"
          },
          "deleteEmptyInventory": {
            "type": "boolean",
            "example": "false",
            "description": "deleteEmptyInventory",
            "default": false
          },
          "doNotPublishInventoryUnknownLicense": {
            "type": "boolean",
            "example": "true",
            "description": "doNotPublishInventoryUnknownLicense",
            "default": false
          },
          "folderId": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "customFields": {
            "type": "array",
            "description": "customFields",
            "items": {
              "$ref": "#/components/schemas/CustomFieldModel"
            }
          }
        }
      },
      "ProjectRoleModel": {
        "type": "object",
        "properties": {
          "ownerId": {
            "type": "string",
            "example": "admin",
            "description": "ownerId"
          },
          "securityContactId": {
            "type": "string",
            "example": "admin",
            "description": "securityContactId"
          },
          "developerContactId": {
            "type": "string",
            "example": "admin",
            "description": "developerContactId"
          },
          "legalContactId": {
            "type": "string",
            "example": "admin",
            "description": "legalContactId"
          },
          "userRoles": {
            "$ref": "#/components/schemas/usersRole"
          }
        }
      },
      "ReportCriteriaModel": {
        "type": "object",
        "required": [
          "description",
          "label",
          "name",
          "order",
          "type"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "Name of the Report Parameter",
            "description": "name"
          },
          "label": {
            "type": "string",
            "example": "Display Name of the Report Parameter",
            "description": "label",
            "minLength": 0,
            "maxLength": 120
          },
          "description": {
            "type": "string",
            "example": "Description of the Report Parameter",
            "description": "description",
            "minLength": 0,
            "maxLength": 300
          },
          "type": {
            "type": "string",
            "example": "Type of the Report Parameter",
            "description": "type"
          },
          "defaultValue": {
            "type": "string",
            "example": "Default value of the Report Parameter",
            "description": "defaultValue"
          },
          "required": {
            "type": "boolean",
            "example": "Set this property to true, if this parameter is mandatory to generate report",
            "description": "required",
            "default": false
          },
          "order": {
            "type": "integer",
            "format": "int32",
            "example": "4",
            "description": "order",
            "minimum": 1
          }
        }
      },
      "ReportModel": {
        "type": "object",
        "required": [
          "name",
          "order",
          "path"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "Name of the report",
            "description": "name"
          },
          "path": {
            "type": "string",
            "example": "Path of the report",
            "description": "path"
          },
          "enabled": {
            "type": "boolean",
            "example": "true",
            "description": "enabled",
            "default": false
          },
          "order": {
            "type": "integer",
            "format": "int32",
            "example": "4",
            "description": "order",
            "minimum": 1
          },
          "enableProjectPicker": {
            "type": "boolean",
            "example": "Set this property to true, if this report is applicable across more than one project.",
            "description": "enableProjectPicker",
            "default": false
          },
          "reportOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportCriteriaModel"
            }
          }
        }
      },
      "ReportsModel": {
        "type": "object",
        "properties": {
          "otherProjectId": {
            "type": "integer",
            "format": "int32",
            "example": "1",
            "description": "otherProjectId"
          },
          "options": {
            "type": "object",
            "description": "options",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "RepositoryItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "license": {
            "$ref": "#/components/schemas/License"
          },
          "title": {
            "type": "string"
          },
          "component": {
            "$ref": "#/components/schemas/Component"
          },
          "item": {
            "$ref": "#/components/schemas/Item"
          },
          "componentVersion": {
            "$ref": "#/components/schemas/ComponentVersion"
          },
          "inUse": {
            "type": "boolean",
            "default": false
          },
          "createdBy": {
            "type": "string"
          },
          "createDate": {
            "type": "string",
            "format": "date-time"
          },
          "updateDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "RepositoryItemImpl": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "component": {
            "$ref": "#/components/schemas/ComponentImpl"
          },
          "componentVersion": {
            "$ref": "#/components/schemas/ComponentVersion"
          },
          "license": {
            "$ref": "#/components/schemas/License"
          },
          "licenseId": {
            "type": "integer",
            "format": "int64"
          },
          "inUse": {
            "type": "boolean",
            "default": false
          },
          "createDate": {
            "type": "string",
            "format": "date-time"
          },
          "updateDate": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "autoDetectionNotes": {
            "type": "string"
          },
          "notes": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "item": {
            "$ref": "#/components/schemas/Item"
          }
        }
      },
      "RuleInfo": {
        "type": "object",
        "required": [
          "detectionCriteria",
          "detectionType"
        ],
        "properties": {
          "detectionType": {
            "type": "string",
            "example": "filePath",
            "description": "detectionType"
          },
          "detectionCriteria": {
            "type": "array",
            "example": "[filepath]",
            "description": "detectionCriteria",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RuleModel": {
        "type": "object",
        "required": [
          "componentId",
          "licenseId",
          "versionId"
        ],
        "properties": {
          "componentId": {
            "type": "integer",
            "format": "int64",
            "example": "1",
            "description": "componentId",
            "minimum": 1
          },
          "versionId": {
            "type": "integer",
            "format": "int64",
            "example": "1",
            "description": "versionId",
            "minimum": 1
          },
          "licenseId": {
            "type": "integer",
            "format": "int64",
            "example": "1",
            "description": "licenseId",
            "minimum": 1
          },
          "description": {
            "type": "string",
            "example": "description",
            "description": "description"
          },
          "url": {
            "type": "string",
            "example": "https://www.flexera.com/",
            "description": "url",
            "minLength": 0,
            "maxLength": 2400,
            "pattern": "(NA|^https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&\\/\\/=]*))"
          },
          "noticesText": {
            "type": "string",
            "example": "Sample Notices Text",
            "description": "noticesText"
          },
          "auditNotes": {
            "type": "string",
            "example": "Sample Audit Notes",
            "description": "auditNotes"
          },
          "asFoundLicenseText": {
            "type": "string",
            "example": "Sample from file LICENSE.txt in file @file in the materials",
            "description": "asFoundLicenseText"
          },
          "fileInfo": {
            "type": "array",
            "description": "fileInfo",
            "items": {
              "$ref": "#/components/schemas/FileInfo"
            }
          },
          "ruleInfo": {
            "type": "array",
            "description": "ruleInfo",
            "items": {
              "$ref": "#/components/schemas/RuleInfo"
            }
          }
        }
      },
      "SCMModel": {
        "type": "object",
        "properties": {
          "propertyList": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          },
          "scmtype": {
            "type": "string"
          }
        }
      },
      "SubversionSCMModel": {
        "type": "object",
        "required": [
          "url"
        ],
        "properties": {
          "url": {
            "type": "string",
            "description": "url",
            "minLength": 0,
            "maxLength": 2400
          },
          "userName": {
            "type": "string",
            "example": "abc",
            "description": "userName",
            "minLength": 0,
            "maxLength": 255
          },
          "password": {
            "type": "string",
            "example": "abc",
            "description": "password",
            "minLength": 0,
            "maxLength": 255
          },
          "revisionNumber": {
            "type": "string",
            "description": "revisionNumber",
            "minLength": 0,
            "maxLength": 255
          }
        }
      },
      "SuppressedVulnerabilityModel": {
        "type": "object",
        "properties": {
          "suppressId": {
            "type": "integer",
            "format": "int64"
          },
          "vulnerabilityId": {
            "type": "integer",
            "format": "int64"
          },
          "vulnerabilityName": {
            "type": "string"
          },
          "componentId": {
            "type": "integer",
            "format": "int64"
          },
          "componentName": {
            "type": "string"
          },
          "suppressedBy": {
            "type": "string"
          },
          "suppressedDate": {
            "type": "string"
          },
          "componentVersionIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "TFSSCMModel": {
        "type": "object",
        "required": [
          "password",
          "url",
          "username"
        ],
        "properties": {
          "url": {
            "type": "string",
            "description": "url",
            "minLength": 0,
            "maxLength": 2400
          },
          "username": {
            "type": "string",
            "example": "abc",
            "description": "userName",
            "minLength": 0,
            "maxLength": 255
          },
          "password": {
            "type": "string",
            "example": "abc",
            "description": "password",
            "minLength": 0,
            "maxLength": 255
          },
          "changeSet": {
            "type": "string",
            "description": "changeSet",
            "minLength": 0,
            "maxLength": 255
          },
          "label": {
            "type": "string",
            "description": "label",
            "minLength": 0,
            "maxLength": 255
          }
        }
      },
      "TriggeredBy": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "user": {
            "type": "string"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "externalId": {
            "type": "string"
          },
          "login": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "jobTitle": {
            "type": "string"
          },
          "telephone": {
            "type": "string"
          },
          "fax": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "businessUnit": {
            "type": "string"
          },
          "question": {
            "type": "string"
          },
          "answer": {
            "type": "string"
          },
          "createDate": {
            "type": "string",
            "format": "date-time"
          },
          "updateDate": {
            "type": "string",
            "format": "date-time"
          },
          "userStatus": {
            "$ref": "#/components/schemas/UserStatus"
          },
          "state": {
            "type": "string",
            "enum": [
              "UNUSED",
              "ACTIVE",
              "INACTIVE"
            ]
          },
          "passwords": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/Password"
            }
          },
          "permissions": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/UserPermission"
            }
          },
          "userLists": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/UserList"
            }
          },
          "userRole": {
            "$ref": "#/components/schemas/UserRole"
          },
          "ldapAuthenicated": {
            "type": "boolean",
            "default": false
          },
          "displayName": {
            "type": "string"
          },
          "lastUpdatedDate": {
            "type": "string",
            "format": "date-time"
          },
          "displayNameWithLogin": {
            "type": "string"
          }
        }
      },
      "UserList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "ldapPopulated": {
            "type": "boolean",
            "default": false
          },
          "owner": {
            "$ref": "#/components/schemas/User"
          },
          "users": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "permissions": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/UserPermission"
            }
          },
          "allUsers": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      },
      "UserModel": {
        "type": "object",
        "required": [
          "answer",
          "email",
          "firstName",
          "lastName",
          "login",
          "password",
          "question"
        ],
        "properties": {
          "login": {
            "type": "string",
            "example": "admin",
            "description": "login",
            "minLength": 1,
            "maxLength": 60
          },
          "firstName": {
            "type": "string",
            "example": "John",
            "description": "firstName",
            "minLength": 1,
            "maxLength": 60
          },
          "lastName": {
            "type": "string",
            "example": "Miller",
            "description": "lastName",
            "minLength": 1,
            "maxLength": 60
          },
          "email": {
            "type": "string",
            "example": "john@yahoomail.com",
            "description": "email",
            "pattern": "^(.+)@(.+)$"
          },
          "password": {
            "type": "string",
            "example": "Password123",
            "description": "password",
            "pattern": "(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=\\S+$).{8,}"
          },
          "question": {
            "type": "string",
            "example": "What is your best friend name?",
            "description": "question",
            "minLength": 3,
            "maxLength": 300
          },
          "answer": {
            "type": "string",
            "example": "Jim",
            "description": "answer",
            "minLength": 3,
            "maxLength": 2147483647
          }
        }
      },
      "UserPermission": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "UserRole": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "UserStatus": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "VersionListModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "custom": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "VersionModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "name"
          },
          "vulnerabilitySummary": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      },
      "VersionSuppressModel": {
        "type": "object",
        "properties": {
          "suppressId": {
            "type": "integer",
            "format": "int64"
          },
          "vulnerabilityName": {
            "type": "string"
          },
          "componentName": {
            "type": "string"
          },
          "versionId": {
            "type": "integer",
            "format": "int64"
          },
          "versionName": {
            "type": "string"
          },
          "suppressedReason": {
            "type": "string"
          },
          "suppressedRemarks": {
            "type": "string"
          },
          "suppressedBy": {
            "type": "string"
          },
          "suppressedDate": {
            "type": "string"
          }
        }
      },
      "Versions": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "cves": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/CVEData"
            }
          }
        }
      },
      "Vulnerability": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "children": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/Vulnerability"
            }
          },
          "description": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "severity": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "severityAsInteger": {
            "type": "integer",
            "format": "int32"
          },
          "originalReleaseDate": {
            "type": "string",
            "format": "date-time"
          },
          "lastRevisedDate": {
            "type": "string",
            "format": "date-time"
          },
          "vulnerabilityReferences": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/VulnerabilityReferencesEntity"
            }
          },
          "vulnerabilityCWE": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/VulnerabilityCweEntity"
            }
          },
          "cvssv2Severity": {
            "type": "string"
          },
          "cvssv3Severity": {
            "type": "string"
          },
          "cvssv2Vector": {
            "type": "string"
          },
          "cvssv3Vector": {
            "type": "string"
          },
          "cvssv3Score": {
            "type": "number"
          },
          "cvssv2Score": {
            "type": "number"
          },
          "registry": {
            "$ref": "#/components/schemas/VulnerabilityRegistry"
          },
          "score": {
            "type": "number"
          }
        }
      },
      "VulnerabilityAlert": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "createDate": {
            "type": "string",
            "format": "date-time"
          },
          "owner": {
            "$ref": "#/components/schemas/User"
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          },
          "closed": {
            "type": "boolean",
            "default": false
          },
          "closedBy": {
            "$ref": "#/components/schemas/User"
          },
          "closedDate": {
            "type": "string",
            "format": "date-time"
          },
          "suppressClosed": {
            "type": "boolean",
            "default": false
          },
          "unsuppressCreated": {
            "type": "boolean",
            "default": false
          },
          "reason": {
            "type": "string"
          },
          "vulnerability": {
            "$ref": "#/components/schemas/VulnerabilityLib"
          },
          "updateId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "VulnerabilityCustom": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "cvssv2Score": {
            "type": "number"
          },
          "cvssv2Severity": {
            "type": "string"
          },
          "cvssv3Score": {
            "type": "number"
          },
          "cvssv3Severity": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "lastRevisedDate": {
            "type": "string",
            "format": "date-time"
          },
          "originalReleaseDate": {
            "type": "string",
            "format": "date-time"
          },
          "source": {
            "type": "string"
          },
          "registry": {
            "$ref": "#/components/schemas/VulnerabilityRegistry"
          },
          "customComponentVersions": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/ComponentVersionCustom"
            }
          },
          "libComponentVersions": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/ComponentVersionLib"
            }
          },
          "children": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/Vulnerability"
            }
          },
          "severity": {
            "type": "string"
          },
          "severityAsInteger": {
            "type": "integer",
            "format": "int32"
          },
          "vulnerabilityReferences": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/VulnerabilityReferencesEntity"
            }
          },
          "vulnerabilityCWE": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/VulnerabilityCweEntity"
            }
          },
          "cvssv2Vector": {
            "type": "string"
          },
          "cvssv3Vector": {
            "type": "string"
          },
          "score": {
            "type": "number"
          }
        }
      },
      "VulnerabilityCweEntity": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "VulnerabilityLib": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "cvssv2Score": {
            "type": "number"
          },
          "cvssv2Severity": {
            "type": "string"
          },
          "cvssv3Score": {
            "type": "number"
          },
          "cvssv3Severity": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "custom": {
            "type": "boolean",
            "default": false
          },
          "lastRevisedDate": {
            "type": "string",
            "format": "date-time"
          },
          "originalReleaseDate": {
            "type": "string",
            "format": "date-time"
          },
          "source": {
            "type": "string"
          },
          "registry": {
            "$ref": "#/components/schemas/VulnerabilityRegistry"
          },
          "deprecated": {
            "type": "boolean",
            "default": false
          },
          "customComponentVersions": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/ComponentVersionCustom"
            }
          },
          "libComponentVersions": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/ComponentVersionLib"
            }
          },
          "children": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/Vulnerability"
            }
          },
          "cvssv2Vector": {
            "type": "string"
          },
          "cvssv3Vector": {
            "type": "string"
          },
          "vulnerabilityCWE": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/VulnerabilityCweEntity"
            }
          },
          "vulnerabilityReferences": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/VulnerabilityReferencesEntity"
            }
          },
          "severity": {
            "type": "string"
          },
          "severityAsInteger": {
            "type": "integer",
            "format": "int32"
          },
          "score": {
            "type": "number"
          }
        }
      },
      "VulnerabilityReferencesEntity": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          }
        }
      },
      "VulnerabilityRegistry": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "VulnerabilitySuppressEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "componentId": {
            "type": "integer",
            "format": "int64"
          },
          "componentName": {
            "type": "string"
          },
          "vulnerabilityId": {
            "type": "integer",
            "format": "int64"
          },
          "vulnerabilityName": {
            "type": "string"
          },
          "versionScope": {
            "type": "string",
            "enum": [
              "SPECIFIC_VERSIONS",
              "ALL_CURRENT_VERSIONS"
            ]
          },
          "suppressedVersions": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/VulnerabilitySuppressedVersionEntity"
            }
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "updatedDate": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string"
          },
          "updatedBy": {
            "type": "string"
          }
        }
      },
      "VulnerabilitySuppressModel": {
        "type": "object",
        "required": [
          "componentId",
          "reason",
          "remarks",
          "versionScope",
          "vulnerabilityName"
        ],
        "properties": {
          "componentId": {
            "type": "integer",
            "format": "int64",
            "example": "1",
            "description": "componentId",
            "minimum": 1
          },
          "versionIds": {
            "type": "array",
            "description": "versionIds",
            "uniqueItems": true,
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "vulnerabilityName": {
            "type": "string",
            "example": "Vulnerability Name",
            "description": "vulnerabilityName"
          },
          "reason": {
            "type": "string",
            "example": "FALSE_POSITIVE|REMEDIATED|OTHER",
            "description": "reason",
            "pattern": "FALSE_POSITIVE|REMEDIATED|OTHER"
          },
          "remarks": {
            "type": "string",
            "example": "Remarks to Suppress Vulnerability",
            "description": "remarks",
            "minLength": 0,
            "maxLength": 255
          },
          "versionScope": {
            "type": "string",
            "example": "SPECIFIC_VERSIONS|ALL_CURRENT_VERSIONS",
            "description": "versionScope",
            "pattern": "SPECIFIC_VERSIONS|ALL_CURRENT_VERSIONS"
          }
        }
      },
      "VulnerabilitySuppressedVersionEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "versionId": {
            "type": "integer",
            "format": "int64"
          },
          "versionName": {
            "type": "string"
          },
          "reason": {
            "type": "string",
            "enum": [
              "FALSE_POSITIVE",
              "REMEDIATED",
              "OTHER"
            ]
          },
          "remarks": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "SUPPRESS",
              "UNSUPPRESS"
            ]
          },
          "suppressEntity": {
            "$ref": "#/components/schemas/VulnerabilitySuppressEntity"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "updatedDate": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string"
          },
          "updatedBy": {
            "type": "string"
          }
        }
      },
      "VulnerabilityUnsuppressModel": {
        "type": "object",
        "required": [
          "componentId",
          "remarks",
          "vulnerabilityName"
        ],
        "properties": {
          "vulnerabilityName": {
            "type": "string",
            "example": "Vulnerability Name",
            "description": "vulnerabilityName"
          },
          "componentId": {
            "type": "integer",
            "format": "int64",
            "example": "1",
            "description": "componentId",
            "minimum": 1
          },
          "versionIds": {
            "type": "array",
            "description": "versionIds",
            "uniqueItems": true,
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "remarks": {
            "type": "string",
            "example": "Remarks to Unsuppress Vulnerability",
            "description": "remarks",
            "minLength": 0,
            "maxLength": 255
          }
        }
      },
      "WorkflowTaskModel": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "example": "admin",
            "description": "owner"
          },
          "summary": {
            "type": "string",
            "example": "Summary for the task",
            "description": "summary"
          },
          "priority": {
            "type": "string",
            "example": "MEDIUM",
            "description": "priority",
            "enum": [
              "LOW",
              "MEDIUM",
              "HIGH"
            ]
          },
          "type": {
            "type": "string",
            "example": "MISCELLANEOUS",
            "description": "type",
            "enum": [
              "MISCELLANEOUS",
              "MANUAL_INVENTORY_REVIEW",
              "REMEDIATE_INVENTORY"
            ]
          },
          "details": {
            "type": "string",
            "example": "Details of the task",
            "description": "details"
          }
        }
      },
      "component": {
        "type": "object",
        "required": [
          "id",
          "licenseId",
          "versionId"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": "58316",
            "description": "id"
          },
          "versionId": {
            "type": "string",
            "example": "3704669",
            "description": "versionId"
          },
          "licenseId": {
            "type": "string",
            "example": "158",
            "description": "licenseId"
          }
        }
      },
      "usersRole": {
        "type": "object",
        "required": [
          "roleId",
          "users"
        ],
        "properties": {
          "roleId": {
            "type": "string",
            "example": "ANALYST",
            "description": "roleId"
          },
          "users": {
            "type": "array",
            "description": "users",
            "items": {
              "type": "string"
            }
          }
        }
      }
    }
  }
}